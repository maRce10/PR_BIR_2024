View(as.data.frame(bi_mat))
iniquiry_calls <- readRDS("~/Descargas/iniquiry_calls.RDS")
iniquiry_calls <- readRDS("./examples/iniquiry_calls.RDS")
iniquiry_calls
iniquiry_calls2 <- resample_est(iniquiry_calls, samp.rate = 375)
iniquiry_calls
cross_correlation(iniquiry_calls)
iniquiry_calls2
cross_correlation(iniquiry_calls2)
cr <- attr(iniquiry_calls, "check.res")
cr
View(cr)
aggregate(samp.rate ~ sound.files, cr, mean)
names(cr)
aggregate(sample.rate ~ sound.files, cr, mean)
aggregate(sample.rate ~ indiv, cr, mean)
cr$indiv <- iniquiry_calls$indiv
aggregate(sample.rate ~ indiv, cr, mean)
aggregate(sample.rate ~ indiv, cr[cr$indiv %in% c("206433", "279470", "279533", "279820"),], mean)
aggregate(sample.rate ~ indiv, cr[cr$indiv %in% c("206433", "279545", "279817", "279820"),], mean)
inquiry_calls <- readRDS("./examples/inquiry_calls.RDS")
inquiry_calls <- readRDS("~/Descargas/inquiry_calls.RDS")
cross_correlation(inquiry_calls[inquiry_calls$indiv %in%  ("206433", "279545", "279817", "279820"), ])
cross_correlation(inquiry_calls[inquiry_calls$indiv %in%  c("206433", "279545", "279817", "279820"), ])
xci <- cross_correlation(inquiry_calls[inquiry_calls$indiv %in%  c("206433", "279545", "279817", "279820"), ])
xci <- cross_correlation(inquiry_calls[inquiry_calls$indiv %in%  c("206433", "279545", "279817", "279820"), ], ovlp = 10)
xci
sub_inq_est <- inquiry_calls[inquiry_calls$indiv %in%  c("206433", "279545", "279817", "279820"), ]
xci <- cross_correlation(sub_inq_est, ovlp = 10)
inquiry_calls <- readRDS("~/Descargas/inquiry_calls.RDS")
sub_inq_est
xci <- cross_correlation(sub_inq_est, ovlp = 10)
bi_mat <- binary_triangular_matrix(sub_inq_est$indiv)
bi_mat
library(vegan)
1 - xci
mantel(xdis = bi_mat, ydis = 1 - xci)
xci <- cross_correlation(sub_inq_est, ovlp = 90)
bi_mat <- binary_triangular_matrix(sub_inq_est$indiv)
xci <- cross_correlation(sub_inq_est, ovlp = 10)
bi_mat <- binary_triangular_matrix(sub_inq_est$indiv)
library(vegan)
mantel(xdis = bi_mat, ydis = 1 - xci)
warbleR_options(wav.path = "./examples/", flim = c(1, 10), wl = 200, ovlp = 10, pb = TRUE)
xci <- cross_correlation(sub_inq_est)
bi_mat <- binary_triangular_matrix(sub_inq_est$indiv)
mantel(xdis = bi_mat, ydis = 1 - xci)
# MFCC
xci_cc <- cross_correlation(sub_inq_est, type = "mfcc")
mantel(xdis = bi_mat, ydis = 1 - xci_cc)
xci_cc
warbleR_options(wav.path = "./examples/", flim = c(1, 10), wl = 200, ovlp = 90, pb = TRUE)
# MFCC
xci_cc <- cross_correlation(sub_inq_est, type = "mfcc")
mantel(xdis = bi_mat, ydis = 1 - xci_cc)
# MFCC
xci_cc <- cross_correlation(sub_inq_est, type = "mfcc", bp = c(1, 10))
mantel(xdis = bi_mat, ydis = 1 - xci_cc)
mantel(xdis = bi_mat, ydis = 1 - xci)
dtw_dist <- freq_DTW(sub_inq_est)
dtw_dist <- freq_DTW(sub_inq_est, img = FALSE)
dtw_dist
mantel(xdis = bi_mat, ydis = dtw_dist)
warbleR_options(wav.path = "./examples/", flim = c(1, 10), wl = 200, ovlp = 10, pb = TRUE)
dtw_dist <- freq_DTW(sub_inq_est, img = FALSE)
mantel(xdis = bi_mat, ydis = dtw_dist)
# add a 'song' column
lbh_selec_table$song <- rep(1:4, each = 3)[1:11]
View(lbh_selec_table)
# measure default parameters
song_analysis(X = lbh_selec_table, song_colm = "song", parallel = 1, pb = TRUE)
# measure acoustic parameters
sp <- spectro_analysis(lbh_selec_table[1:8, ], bp = c(1, 11), 300, fast = TRUE)
sp <- merge(sp, lbh_selec_table[1:8, ], by = c("sound.files", "selec"))
View(sp)
# measure acoustic parameters
sp <- spectro_analysis(lbh_selec_table[1:8, ], bp = c(1, 11), 300, fast = TRUE)
sp <- merge(sp, lbh_selec_table[1:8, c("sound.files", "selec", "song")], by = c("sound.files", "selec"))
View(sp)
# caculate song-level parameters for all numeric parameters
song_analysis(X = sp, song_colm = "song", parallel = 1, pb = TRUE)
sp <- merge(sp, lbh_selec_table[1:8, ], by = c("sound.files", "selec"))
# caculate song-level parameters for all numeric parameters
song_analysis(X = sp, song_colm = "song", parallel = 1, pb = TRUE)
# measure acoustic parameters
sp <- spectro_analysis(lbh_selec_table[1:8, ], bp = c(1, 11), 300, fast = TRUE)
sp <- merge(sp, lbh_selec_table[1:8, ], by = c("sound.files", "selec"))
# caculate song-level parameters for all numeric parameters
song_analysis(X = sp, song_colm = "song", parallel = 1, pb = TRUE)
# caculate song-level parameters for all numeric parameters
song_analysis(X = sp, song_colm = "song", parallel = 1, pb = TRUE, sd = TRUE)
download.file(url = "https://github.com/maRce10/PR_BIR_2024/raw/master/examples/response_calls.RDS",
destfile = "./examples/response_calls.RDS")
response_calls <- readRDS("./examples/response_calls.RDS")
response_calls
sp <- spectro_analysis(X = response_calls, parallel = 3, wl = 512)
sp$end <- response_calls$end
sp$start <- response_calls$start
View(sp)
sa <- song_analysis(X = sp, song_colm = "sound.files", parallel = 1, pb = TRUE)
View(sa)
fix_wavs(path = "./examples/mp3/", samp.rate = 44.1, bit.depth = 24)
fix_wavs(path = "./examples/mp3/", samp.rate = 44.1, bit.depth = 24)
list.files()
info_sound_files(path = "./examples/mp3/converted_sound_files")
fix_wavs(path = "./examples/mp3/", samp.rate = 22.05, bit.depth = 24)
info_sound_files(path = "./examples/mp3/converted_sound_files")
check_sound_files(path = "./examples/mp3/")
write.csv(iris, "./examples/mp3/iris.wav")
check_sound_files(path = "./examples/mp3/")
# copiar las primeras 6 filas
st2 <- lbh_selec_table[1:6, ]
# hacer caracter
st2$sound.files <- as.character(st2$sound.files)
# cambiar nombre de archivo de sonido en sel 1
st2$sound.files[1] <- "aaa.wav"
# modificar fin en sel 3
st2$end[3] <- 100
# hacer top.freq igual q bottom freq en sel 3
st2$top.freq[3] <- st2$bottom.freq[3]
# modificar top freq en sel 5
st2$top.freq[5] <- 200
# modificar channes en sel 6
st2$channel[6] <- 3
# revisar
cs <- check_sels(st2)
View(cs)
# using default parameters tweak_spectro()
warbleR_options(wav.path = "./examples", wl = 220, wn = "hanning",
ovlp = 90, pal = reverse.topo.colors)
spectrograms(lbh_selec_table, collevels = seq(-100, 0, 5))
lbh_selec_table
lbh_selec_table$sel.comment <- letters[1:11]
spectrograms(lbh_selec_table, collevels = seq(-100, 0, 5), sel.labels = "sel.comment")
tailor_sels(X = lbh_selec_table[1:4, ], auto.next = TRUE)
cntours <- freq_ts(X = lbh_selec_table[1:5, ])
View(cntours)
tail.cntours <- tailor_sels(X = lbh_selec_table[1:5, ], ts.df = cntours,
auto.contour = TRUE)
tail.cntours <- tailor_sels(X = lbh_selec_table[1:5, ], ts.df = cntours,
auto.contour = TRUE)
tail.cntours <- tailor_sels(X = lbh_selec_table[1:5, ], ts.df = cntours, mar = 0.01,
auto.contour = TRUE)
library(ohun)
data(c("lbh_reference"))
lbh1_reference <-
lbh_reference[lbh_reference$sound.files == "lbh1.wav",]
data(c("lbh_reference"))
lbh1_reference <-
lbh_reference[lbh_reference$sound.files == "lbh1.wav",]
lbh_reference
data("lbh_reference")
lbh1_reference <-
lbh_reference[lbh_reference$sound.files == "lbh1.wav",]
# diagnose
diagnose_detection(reference = lbh1_reference,
detection = lbh1_reference)[, c(1:3, 7:9)]
# diagnose
diagnose_detection(reference = lbh1_reference,
detection = lbh1_reference)
# create new table
lbh1_detection <- lbh1_reference[3:9, ]
# diagnose
diagnose_detection(reference = lbh1_reference,
detection = lbh1_detection)[, c(1:3, 7:9)]
# diagnose
diagnose_detection(reference = lbh1_reference,
detection = lbh1_detection)
lbh1_detection
as.data.frame(lbh1_detection)
lbh1_detection$start[nrow(lbh1_detection)] <- 3.9
lbh1_detection$start[nrow(lbh1_detection)] <- 3.9
lbh1_detection$end[nrow(lbh1_detection)] <- 4.1
## print spectrogram
label_spectro(
wave = lbh1,
reference = lbh1_reference,
detection = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
# save sound file
writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
data("lbh1")
# save sound file
writeWave(lbh1, file.path(tempdir(), "lbh1.wav"))
## print spectrogram
label_spectro(
wave = lbh1,
reference = lbh1_reference,
detection = lbh1_detection,
hop.size = 10,
ovlp = 50,
flim = c(1, 10)
)
lbh1_detection
View(lbh1_detection)
lbh1_reference
View(lbh1_reference)
# diagnose
diagnose_detection(reference = lbh1_reference,
detection = lbh1_detection)
nrow(lbh_reference)
table(lbh_reference$sound.files)
# diagnose by sound file
diagnostic <-
diagnose_detection(reference = lbh_reference,
detection = lbh_reference[-c(1, 19), ],
by.sound.file = FALSE)
diagnostic
# diagnose by sound file
diagnostic <-
diagnose_detection(reference = lbh_reference,
detection = lbh_reference[-c(1, 19), ],
by.sound.file = TRUE)
diagnostic
summarize_diagnostic(diagnostic)
summarize_reference(lbh_reference)
sim_2 <-
simulate_songs(
n = 10,
durs = durs,
freqs = 5,
sig2 = 0.01,
gaps = 0.5,
harms = 1,
bgn = 0.1,
path = tempdir(),
file.name = "simulated_2",
selec.table = TRUE,
shape = "cos",
fin = 0.3,
fout = 0.35,
samp.rate = 18,
am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1)
)
#Creating vector for duration
durs <- rep(c(0.3, 1), 5)
#Creating simulated song
set.seed(12)
#Creating vector for duration
durs <- rep(c(0.3, 1), 5)
sim_2 <-
simulate_songs(
n = 10,
durs = durs,
freqs = 5,
sig2 = 0.01,
gaps = 0.5,
harms = 1,
bgn = 0.1,
path = tempdir(),
file.name = "simulated_2",
selec.table = TRUE,
shape = "cos",
fin = 0.3,
fout = 0.35,
samp.rate = 18,
am.amps = c(1, 2, 3, 2, 0.1, 2, 3, 3, 2, 1)
)
# extract wave object and selection table
simulated_2 <- sim_2$wave
sim2_sel_table <- sim_2$selec.table
simulated_2
optim_detection <-
optimize_energy_detector(
reference = sim2_sel_table,
files = "simulated_2.wav",
threshold = 50,
min.duration = 1,
path = tempdir(),
smooth = c(100, 250, 350)
)
View(optim_detection)
# get mean structure template
template <-
get_templates(reference = lbh1_reference, path = tempdir())
template
# get correlations
correlations <-
template_correlator(templates = template,
files = "lbh1.wav",
path = tempdir())
correlations
# run detection
detection <-
template_detector(template.correlations = correlations, threshold = 0.4)
detection
diagnose_detection(reference = lbh1_reference, detection = detection)
vctr <- 1:3 # vector sobre el cual iterar el bucle
for (i in vctr) { # inicio del bucle
print(i^2)
} # cuerpo del bucle
vctr <- 2:4 # vector sobre el cual iterar el bucle
for (i in vctr) { # inicio del bucle
print(i^2)
} # cuerpo del bucle
vctr2 <- 2:4 # vector sobre el cual iterar el bucle
for (i in vctr2) { # inicio del bucle
print(i^2)
} # cuerpo del bucle
vctr2 <- 2:4 # vector sobre el cual iterar el bucle
for (e in vctr2) { # inicio del bucle
print(e^2)
} # cuerpo del bucle
vctr2 <- 2:4 # vector sobre el cual iterar el bucle
for (x in vctr2) { # inicio del bucle
print(x^2)
} # cuerpo del bucle
vctr2 <- 2:4 # vector sobre el cual iterar el bucle
for (x in vctr2) { # inicio del bucle
print(x^2)
} # cuerpo del bucle
vctr <- 1:3 # vector sobre el cual iterar el bucle
for (i in vctr) { # inicio del bucle
print(paste("# corriendo iteración", i))
Sys.sleep(2) # pausar 2 segundos
print(i^2) # cuerpo del bucle
}
# vector vacio
resultados <- vector()
vctr2 <- 2:4 # vector sobre el cual iterar el bucle
for (x in vctr2) { # inicio del bucle
print(x^2)
} # cuerpo del bucle
vctr <- 1:3 # vector sobre el cual iterar el bucle
for (i in vctr) { # inicio del bucle
print(paste("# corriendo iteración", i))
Sys.sleep(2) # pausar 2 segundos
print(i^2) # cuerpo del bucle
}
# vector sobre el cual iterar el bucle
vctr <- 1:3
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
}
# ver resultados
resultados
# vector sobre el cual iterar el bucle
vctr <- 1:3
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
}
# ver resultados
resultados
# vector sobre el cual iterar el bucle
vctr <- 1:3
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
# vector sobre el cual iterar el bucle
vctr <- 1:3
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- c(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
# ver resultados
resultados
print(length(resultados))
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- c(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
# vector sobre el cual iterar el bucle
vctr <- unique(iris$Species)
vctr
aggregate(Sepal.Length ~ Species, data = iris, FUN = mean)
# vector sobre el cual iterar el bucle
vctr <- 1:3
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
# cuerpo del bucle
i2 <- i^2
Sys.sleep(1)
print(length(resultados))
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
print(length(resultados))
}
# ver resultados
resultados
# vector sobre el cual iterar el bucle
vctr <- unique(iris$Species)
# vector vacio
resultados <- vector()
# inicio del bucle
for (i in vctr) {
sub_sl <- iris$Sepal.Length[iris$Species == i]
# cuerpo del bucle
i2 <- mean(sub_sl)
# guardar resultados en vector vacio
resultados <- append(resultados, i2)
}
# añadir nombre de especies
names(resultados) <- vctr
resultados
resultados
aggregate(Sepal.Length ~ Species, data = iris, FUN = mean)
# definir directorio a donde guardar los archivos
directorio <- tempdir()
# guardar archivos
download.file(
url = paste0(
"https://github.com/maRce10/ucr_r_avanzado/",
"raw/master/additional_files/datos_camara_submarina.zip"
),
destfile = file.path(directorio, "datos_camara_submarina.zip")
)
# extraerlos del zip
unzip(
zipfile = file.path(directorio, "datos_camara_submarina.zip"),
exdir = directorio
)
# hacer vector con nombre y direccion de archivos
archivos_txt <-
list.files(
path = directorio,
full.names = TRUE,
pattern = "TXT$"
)
archivos_txt
archivos_txt
archivos_txt[1]
basename(archivos_txt[1])
df <- data.frame(num = 1:2, let = letters[1:2])
df
cbind(df, c(FALSE, TRUE))
cbind(df,log = c(FALSE, TRUE))
df$log <- c(FALSE, TRUE)
df
cor.test(iris$Sepal.Length, iris$Sepal.Width)
