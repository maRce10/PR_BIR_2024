{"title":"<font size=\"7\"><b>Case study</b></font>","markdown":{"yaml":{"title":"<font size=\"7\"><b>Case study</b></font>","toc":true,"toc-depth":2,"toc-location":"left","number-sections":true,"highlight-style":"pygments","format":{"html":{"df-print":"kable","code-fold":"show","code-tools":true,"css":"styles.css"}}},"headingText":"**Objetive**","headingAttr":{"id":"","classes":["unnumbered","unlisted"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n::: {.alert .alert-info}\n\n-   Demonstrate how to articulate functions used during the course to obtain, explore and quantify acoustic data\n:::\n\n \n\n## Download Xeno-Canto data\n\nThe warbleR function [`query_xc()`](https://marce10.github.io/warbleR/reference/query_xc.html) queries for avian vocalization recordings in the open-access online repository [Xeno-Canto](https://xeno-canto.org). It can return recordings metadata or download the associated sound files.\n\nGet recording metadata for green hermits (*Phaethornis guy*):\n\n```{r, echo=FALSE,message=FALSE,  warning=FALSE}\nlibrary(warbleR)\n```\n\n```{r, message=FALSE,  warning=FALSE, eval = FALSE}\n\nlibrary(warbleR)\n\npg <- query_xc(qword = 'Phaethornis guy', download = FALSE)\n\n```\n\n \n\nKeep only song vocalizations of high quality:\n\n```{r, eval = FALSE}\n\nsong_pg <- pg[grepl(\"song\", ignore.case = TRUE, pg$Vocalization_type) & pg$Quality == \"A\", ]\n\n# remove 1 site from Colombia to have a few samples per country\nsong_pg <- song_pg[song_pg$Locality != \"Suaita, Santander\", ]\n\n```\n\n \n\n```{r, echo=FALSE}\nsong_pg <- read.csv(\"./examples/p_guy/metadata_p_guy_XC.csv\")\n```\n\nMap locations using [`map_xc()`](https://marce10.github.io/warbleR/reference/map_xc.html):\n\n```{r, results = 'asis', fig.width=9}\n\nmap_xc(song_pg, leaflet.map = TRUE)\n\n```\n\n \n\nOnce you feel fine with the subset of data you can go ahead and download the sound files and save the metadata as a .csv file:\n\n```{r, eval = FALSE, fig.width=10}\n\nquery_xc(X = song_pg, path = \"./examples/p_guy\", parallel = 3)\n\nwrite.csv(song_pg, file = \"./examples/p_guy/metadata_p_guy_XC.csv\", row.names = FALSE)\n\n```\n\n \n\n## Preparing sound files for analysis (optional)\n\nNow convert all to .wav format (`mp3_2_wav`) and homogenizing sampling rate and bit depth (`fix_wavs`):\n\n```{r, eval = FALSE}\n\nmp3_2_wav(samp.rate = 22.05, path =  \"./examples/p_guy\")\n\nfix_wavs(path =  \"./examples/p_guy\", samp.rate = 44.1, bit.depth = 16)\n\n```\n\n \n\n## Annotating sound files in Raven\n\nNow songs should be manually annotated and all the selection in the .txt files should be pooled together in a single spreadsheet.\n\n \n\n## Importing annotations into R\n\nOnce that is done we can read the spreadsheet with the package 'readxl' as follows:\n\n```{r, eval = FALSE, echo = FALSE}\n\nlibrary(Rraven)\n\nann_p_guy <- imp_raven(path = \"./examples/p_guy\", warbler.format = TRUE)\n\ncheck_sels(ann_p_guy, path = \"./examples/p_guy/converted_sound_files/\")\n\nwrite.csv(ann_p_guy, file = \"./examples/p_guy/annotations_p_guy.csv\", row.names = FALSE)\n\n```\n\n```{r, eval = FALSE}\n# install.packages(\"readxl\") # install if needed\n\n# load package\nlibrary(readxl)\n\n# read data\nannotations <- read_excel(path = \"./examples/p_guy/annotations_p_guy.xlsx\")\n\n# check data\nhead(annotations)\n```\n\n```{r, echo=FALSE}\n\n# load package\nlibrary(readxl)\n\n# read data\nannotations <- read_excel(path = \"./examples/p_guy/annotations_p_guy.xlsx\")\n\nkable(annotations[1:6, -7])\n\n```\n\nNote that the column names should be: \"start\", \"end\", \"bottom.freq\", \"top.freq\" and \"sound.files\". In addition frequency columns (\"bottom.freq\" and \"top.freq\") must be in kHz, not in Hz. We can check if the annotations are in the right format using warbleR's `check_sels()`:\n\n```{r}\n\nsound_file_path <- \"./examples/p_guy/converted_sound_files/\"\n\ncs <- check_sels(annotations, path = sound_file_path)\n\n```\n\n \n\n## Measure acoustic structure\n\nWe can measured several parameters of acoustic structure with the warbleR function `spectro_analysis()`:\n\n```{r, warning=FALSE, message=FALSE}\n\nsp <- spectro_analysis(X = annotations, path = sound_file_path)\n\n```\n\n \n\nThen we summarize those parameters with a Principal Component Analysis (PCA):\n\n```{r}\n\n# run excluding sound file and selec columns\npca <- prcomp(sp[, -c(1, 2)])\n\n\n# add first 2 PCs to sound file and selec columns\npca_data <- cbind(sp[, c(1, 2)], pca$x[, 1:2])\n\n```\n\n \n\nAt this point should should get someting like this:\n\n```{r, eval = FALSE}\nhead(pca_data)\n```\n\n```{r, echo = FALSE}\nkable(pca_data[1:6, ])\n\n```\n\n \n\n'PC1' and 'PC2' are the 2 new dimensions that will be used to represent the acoustic space.\n\n \n\n## Adding metadata\n\nNow we just need to add any metadata we considered important to try to explain acoustic similarities shown in the acoustic space scatterplot:\n\n```{r}\n\n# read XC metadata\nsong_pg <- read.csv(\"./examples/p_guy/metadata_p_guy_XC.csv\")\n\n# create a column with the file name in the metadata\nsong_pg$sound.files <- paste0(song_pg$Genus, \"-\", song_pg$Specific_epithet, \"-\", song_pg$Recording_ID, \".wav\")\n\n# and merge based on sound files and any metadata column we need\npca_data_md <- merge(pca_data, song_pg[, c(\"sound.files\", \"Country\", \"Latitude\", \"Longitude\")])\n\n```\n\n \n\n## Assessing geographic patterns of variation\n\nWe are ready to plot the acoustic space scatterplot. For this we will use the package 'ggplot2':\n\n```{r}\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# install.packages(\"viridis\")\nlibrary(viridis)\n\n# plot\nggplot(data = pca_data_md, aes(x = PC1, y = PC2, color = Country, shape = Country)) +\n  geom_point(size = 3) + \n  scale_color_viridis_d()\n\n```\n\n \n\nYou can also add information about their geographic location (in this case longitude) to the plot as follows:\n\n```{r}\n\n# plot\nggplot(data = pca_data_md, aes(x = PC1, y = PC2, color = Longitude, shape = Country)) +\n  geom_point(size = 3) +\n  scale_color_viridis_c()\n\n```\n\n \n\nWe can even test if geographic distance is associated to acoustic distance (i.e. if individuals geographically closer produce more similar songs) using a [mantel test](https://en.wikipedia.org/wiki/Mantel_test) (`mantel` function from the package vegan):\n\n```{r, warning=FALSE, message=FALSE}\n\n# create geographic and acoustic distance matrices\ngeo_dist <- dist(pca_data_md[, c(\"Latitude\", \"Longitude\")])\nacoust_dist <- dist(pca_data_md[, c(\"PC1\", \"PC2\")])\n\n# install.packages(\"vegan\")\nlibrary(vegan)\n\n# run test\nmantel(geo_dist, acoust_dist)\n\n```\n\n \n\nIn this example no association between geographic and acoustic distance was detected (p value \\> 0.05).\n\n------------------------------------------------------------------------\n\n<font size=\"4\">Session information</font>\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n","srcMarkdownNoYaml":"\n\n::: {.alert .alert-info}\n## **Objetive** {.unnumbered .unlisted}\n\n-   Demonstrate how to articulate functions used during the course to obtain, explore and quantify acoustic data\n:::\n\n \n\n## Download Xeno-Canto data\n\nThe warbleR function [`query_xc()`](https://marce10.github.io/warbleR/reference/query_xc.html) queries for avian vocalization recordings in the open-access online repository [Xeno-Canto](https://xeno-canto.org). It can return recordings metadata or download the associated sound files.\n\nGet recording metadata for green hermits (*Phaethornis guy*):\n\n```{r, echo=FALSE,message=FALSE,  warning=FALSE}\nlibrary(warbleR)\n```\n\n```{r, message=FALSE,  warning=FALSE, eval = FALSE}\n\nlibrary(warbleR)\n\npg <- query_xc(qword = 'Phaethornis guy', download = FALSE)\n\n```\n\n \n\nKeep only song vocalizations of high quality:\n\n```{r, eval = FALSE}\n\nsong_pg <- pg[grepl(\"song\", ignore.case = TRUE, pg$Vocalization_type) & pg$Quality == \"A\", ]\n\n# remove 1 site from Colombia to have a few samples per country\nsong_pg <- song_pg[song_pg$Locality != \"Suaita, Santander\", ]\n\n```\n\n \n\n```{r, echo=FALSE}\nsong_pg <- read.csv(\"./examples/p_guy/metadata_p_guy_XC.csv\")\n```\n\nMap locations using [`map_xc()`](https://marce10.github.io/warbleR/reference/map_xc.html):\n\n```{r, results = 'asis', fig.width=9}\n\nmap_xc(song_pg, leaflet.map = TRUE)\n\n```\n\n \n\nOnce you feel fine with the subset of data you can go ahead and download the sound files and save the metadata as a .csv file:\n\n```{r, eval = FALSE, fig.width=10}\n\nquery_xc(X = song_pg, path = \"./examples/p_guy\", parallel = 3)\n\nwrite.csv(song_pg, file = \"./examples/p_guy/metadata_p_guy_XC.csv\", row.names = FALSE)\n\n```\n\n \n\n## Preparing sound files for analysis (optional)\n\nNow convert all to .wav format (`mp3_2_wav`) and homogenizing sampling rate and bit depth (`fix_wavs`):\n\n```{r, eval = FALSE}\n\nmp3_2_wav(samp.rate = 22.05, path =  \"./examples/p_guy\")\n\nfix_wavs(path =  \"./examples/p_guy\", samp.rate = 44.1, bit.depth = 16)\n\n```\n\n \n\n## Annotating sound files in Raven\n\nNow songs should be manually annotated and all the selection in the .txt files should be pooled together in a single spreadsheet.\n\n \n\n## Importing annotations into R\n\nOnce that is done we can read the spreadsheet with the package 'readxl' as follows:\n\n```{r, eval = FALSE, echo = FALSE}\n\nlibrary(Rraven)\n\nann_p_guy <- imp_raven(path = \"./examples/p_guy\", warbler.format = TRUE)\n\ncheck_sels(ann_p_guy, path = \"./examples/p_guy/converted_sound_files/\")\n\nwrite.csv(ann_p_guy, file = \"./examples/p_guy/annotations_p_guy.csv\", row.names = FALSE)\n\n```\n\n```{r, eval = FALSE}\n# install.packages(\"readxl\") # install if needed\n\n# load package\nlibrary(readxl)\n\n# read data\nannotations <- read_excel(path = \"./examples/p_guy/annotations_p_guy.xlsx\")\n\n# check data\nhead(annotations)\n```\n\n```{r, echo=FALSE}\n\n# load package\nlibrary(readxl)\n\n# read data\nannotations <- read_excel(path = \"./examples/p_guy/annotations_p_guy.xlsx\")\n\nkable(annotations[1:6, -7])\n\n```\n\nNote that the column names should be: \"start\", \"end\", \"bottom.freq\", \"top.freq\" and \"sound.files\". In addition frequency columns (\"bottom.freq\" and \"top.freq\") must be in kHz, not in Hz. We can check if the annotations are in the right format using warbleR's `check_sels()`:\n\n```{r}\n\nsound_file_path <- \"./examples/p_guy/converted_sound_files/\"\n\ncs <- check_sels(annotations, path = sound_file_path)\n\n```\n\n \n\n## Measure acoustic structure\n\nWe can measured several parameters of acoustic structure with the warbleR function `spectro_analysis()`:\n\n```{r, warning=FALSE, message=FALSE}\n\nsp <- spectro_analysis(X = annotations, path = sound_file_path)\n\n```\n\n \n\nThen we summarize those parameters with a Principal Component Analysis (PCA):\n\n```{r}\n\n# run excluding sound file and selec columns\npca <- prcomp(sp[, -c(1, 2)])\n\n\n# add first 2 PCs to sound file and selec columns\npca_data <- cbind(sp[, c(1, 2)], pca$x[, 1:2])\n\n```\n\n \n\nAt this point should should get someting like this:\n\n```{r, eval = FALSE}\nhead(pca_data)\n```\n\n```{r, echo = FALSE}\nkable(pca_data[1:6, ])\n\n```\n\n \n\n'PC1' and 'PC2' are the 2 new dimensions that will be used to represent the acoustic space.\n\n \n\n## Adding metadata\n\nNow we just need to add any metadata we considered important to try to explain acoustic similarities shown in the acoustic space scatterplot:\n\n```{r}\n\n# read XC metadata\nsong_pg <- read.csv(\"./examples/p_guy/metadata_p_guy_XC.csv\")\n\n# create a column with the file name in the metadata\nsong_pg$sound.files <- paste0(song_pg$Genus, \"-\", song_pg$Specific_epithet, \"-\", song_pg$Recording_ID, \".wav\")\n\n# and merge based on sound files and any metadata column we need\npca_data_md <- merge(pca_data, song_pg[, c(\"sound.files\", \"Country\", \"Latitude\", \"Longitude\")])\n\n```\n\n \n\n## Assessing geographic patterns of variation\n\nWe are ready to plot the acoustic space scatterplot. For this we will use the package 'ggplot2':\n\n```{r}\n\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# install.packages(\"viridis\")\nlibrary(viridis)\n\n# plot\nggplot(data = pca_data_md, aes(x = PC1, y = PC2, color = Country, shape = Country)) +\n  geom_point(size = 3) + \n  scale_color_viridis_d()\n\n```\n\n \n\nYou can also add information about their geographic location (in this case longitude) to the plot as follows:\n\n```{r}\n\n# plot\nggplot(data = pca_data_md, aes(x = PC1, y = PC2, color = Longitude, shape = Country)) +\n  geom_point(size = 3) +\n  scale_color_viridis_c()\n\n```\n\n \n\nWe can even test if geographic distance is associated to acoustic distance (i.e. if individuals geographically closer produce more similar songs) using a [mantel test](https://en.wikipedia.org/wiki/Mantel_test) (`mantel` function from the package vegan):\n\n```{r, warning=FALSE, message=FALSE}\n\n# create geographic and acoustic distance matrices\ngeo_dist <- dist(pca_data_md[, c(\"Latitude\", \"Longitude\")])\nacoust_dist <- dist(pca_data_md[, c(\"PC1\", \"PC2\")])\n\n# install.packages(\"vegan\")\nlibrary(vegan)\n\n# run test\nmantel(geo_dist, acoust_dist)\n\n```\n\n \n\nIn this example no association between geographic and acoustic distance was detected (p value \\> 0.05).\n\n------------------------------------------------------------------------\n\n<font size=\"4\">Session information</font>\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"highlight-style":"pygments","css":["styles.css"],"output-file":"measure_structure_green_hermit.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","toc-location":"left","toc-title":"Contents","code-copy":true,"date":"today","title":"<font size=\"7\"><b>Case study</b></font>"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}