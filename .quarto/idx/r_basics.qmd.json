{"title":"<font size=\"7\"><b>Basic elements of the R language</b></font>","markdown":{"yaml":{"title":"<font size=\"7\"><b>Basic elements of the R language</b></font>"},"headingText":"options to customize chunk outputs","containsRefs":false,"markdown":"\n\n```{r,echo=FALSE,message=FALSE}\n\noptions(\"digits\"=5)\noptions(\"digits.secs\"=3)\n\nknitr::opts_chunk$set(\n  message = FALSE\n )\n\n```\n\n::: {.alert .alert-info}\n# Objective of the manual {.unnumbered .unlisted}\n\n-   To understand the basic blocks used in R programming\n\n-   To become familiar with the main sources of standardized documentation in R\n:::\n\n \n\n# What is R?\n\n-   A free [Domain-Specific Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis\n-   A collection of more than 21313 packages (as of 12-sept-2024)\n-   A large and active community in industry and academia\n-   A way to talk “directly” to your computer.\n\nHistorically:\n\n-   Based on the S programming language\n-   About 20 years old (lineage dates back to 1975 - almost 40 years ago)\n\n![](images/Rinterf.jpeg){width=\"100%\"}\n\n \n\n# Rstudio\n\nIntegrated development environment (IDE) for R. Includes:\n\n-   A console\n-   Syntax highlighting editor supporting direct code execution\n-   Tools for tracing, history, debugging, and workspace management\n\n![](images/Rstudio.jpeg){width=\"100%\"}\n\n##  \n\n```{r paleta}\n#| eval: false\n#| echo: false\n\n [1] \"#0B040566\" \"#28192F66\" \"#3B2F5E66\" \"#40498E66\"\n [5] \"#366A9F66\" \"#348AA666\" \"#38AAAC66\" \"#54C9AD66\"\n [9] \"#A0DFB966\" \"#DEF5E566\"\n\n```\n\n# Elements of the R language\n\nIn R everything that exists is an object and objects can be roughly classified into **objects that contain data** and objects that perform tasks, better known as **functions**:\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    R(Objects in R) --> D(Data objects)\n    D --> D1(1 dimension)\n    D --> D2(2 dimensions)\n    D --> DN(N dimensions)\n    R --> F(Functions)\n    \n    D1 --> V(Vector)\n    D1 --> L(List)\n    D2 --> M(Matrix)\n    D2 --> DF(Data Frame)\n    DN --> AR(Array)\n\n    F --> BF(Integraded functions)\n    BF --> BA(Basic functions)\n    BF --> OP(Operators)\n    F --> PF(Packages)\n    F --> UF(User defined functions)\n\n    class R,D,D1,D2,F largeText;\n\n    style R fill:#28192F66, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D fill:#40498E66, stroke:#000, stroke-width:2px, color:#FFF, width:180px\n    style D1 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D2 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style DN fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style F fill:#357BA266, stroke:#000, stroke-width:2px, color:#FFF, width:120px\n    style DF fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style AR fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style V fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style M fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style L fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style BF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n    style BA fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000\n    style OP fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000    \n    style PF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000000\n    style UF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\nTo feel comfortable programming in R it is necessary to know at all times what kind of objects we are working with. The `class()` and `str()` functions allow us to evaluate the structure of objects. We will be using them repeatedly in this tutorial.\n\n## Objects containing data\n\nThe basic data structure in R is the vector. With this all other object classes are built. To understand classes it is useful to think about the number of dimensions (1, 2 or more) and types of data they can contain: homogeneous (a single element type) or heterogeneous (or multiple element types).\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    D(Data objects) --> D1(1 dimension)\n    D --> D2(2 dimensions)\n    D1 --> V(Vector)\n    D1 --> L(List)\n    D2 --> M(Matrix)\n    D2 -->  DF(Data Frame)\n\n    style D fill:#40498E66, stroke:#000, stroke-width:2px, color:#FFF, width:180px\n    style D1 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D2 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style DF fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style V fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style M fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style L fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\n```{r, echo=FALSE}\nd <- data.frame(\n \tc(\"Atomic vector\", \"List\"),\n\tc(\"Matrix\", \"Data frame\"),\nc(\"Array\", \"\"))\n\n\nd <- t(d)\n\ncolnames(d) <-c(\"Homogeneous\",\t\"Heterogeneous\")\n\nrownames(d) <-c(\"1d\",\t\"2d\", \"nd\")\n\nas.data.frame(d)\n\n```\n\n### 1 dimension objects\n\nThere are two basic types of vectors: atomic vectors and lists.\n\nThey have three common properties:\n\n-   Type, `typeof()` (class/mode).\n-   Length, `length()` (number of elements)\n-   Attributes, `attributes()` (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be of the same type, while the elements of a list can have different types.\n\n#### Atomic vectors\n\nTypes of atomic vectors:\n\n-   Logical [(Boolean)](https://en.wikipedia.org/wiki/Boolean)\n-   Integer\n-   Numeric (double)\n-   Characters\n-   Factors\n\nVectors are constructed with the `c()` function, they can be numeric:\n\n```{r}\nx <- 1\nx1 <- c(1)\n\nall.equal(x, x1)\n\nclass(x)\n```\n\nCharacters:\n\n```{r}\ny <- \"something\"\n\nclass(y)\n```\n\nLogical:\n\n```{r}\nz <- TRUE\n\nclass(z)\n```\n\nOr factor:\n\n```{r}\nq <- factor(1)\n\nclass(q)\n\n```\n\nTherefore, the individual numbers or strings are actually vectors of length one:\n\n```{r}\n\nclass(1)\n\nclass(\"a\")\n```\n\nVectors can only contain elements of the same type. Different types of elements will be forced to the most flexible type:\n\n```{r}\n\nx <- c(1, 2, \"a\")\n\nx\n\nclass(x)\n\n```\n\nMissing values are specified with `NA`, which is a logical vector of length 1. `NA` will always be interpreted to the correct type if used inside `c()`:\n\n```{r}\n\nv <- c(10, 11, NA)\n\nclass(v)\n\nv <- c(\"a\", \"b\", NA)\n\nclass(v)\n\n```\n\n<br>\n\n::: {.alert .alert-warning}\n#### Factors\n\nVectors with factors are very similar to character vectors. However, a factor can only contain predefined values, known as levels. Attributes are used to define the levels of the factor.\n\nFactors are built on integer vectors using two attributes:\n\n-   \"factor\" class: makes them behave differently from normal character vectors.\n-   levels: defines the set of allowed values\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\nlevels(x)\n\n\nstr(x)\n\n```\n\nThe factors look like character vectors, but are actually integers:\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n```\n:::\n\n#### Lists\n\nCan contain objects of different classes and sizes. Lists are constructed with list():\n\n```{r}\n\nl <- list(\"a\", 1, FALSE)\n\nl\n\nclass(l)\n\nstr(l)\n\n```\n\nIn fact, they can be seen as drawers where you can put any other type of object:\n\n```{r}\n\n\nl <- list(c(\"a\", \"b\"), \n          c(1, 2, 3, 4), \n          c(FALSE, TRUE, FALSE))\n\nl\n\nstr(l)\n\n```\n\n### 2-dimensional objects\n\n#### Matrices\n\nAll elements are of the same type:\n\n```{r}\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), nrow = 2)\n\ndim(m)\n\nm\n\nclass(m)\n\n\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", 1), nrow = 2)\nm\n\n\n```\n\n#### Data Frames\n\nSpecial case of lists. It can contain elements of different types:\n\n```{r}\n\nm <-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\ndim(m)\n\nm\n\nclass(m)\n\nis.data.frame(m)\n\nis.list(m)\n\nstr(m)\n\n```\n\nBut the vectors must have the same length:\n\n```{r, error = TRUE}\n\nm <-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5, 6),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\n```\n\n \n\n::: {.alert .alert-info}\n## Exercise 1\n\n-   Create a numeric vector with 8 elements containing positive and negative numbers.\n\n-   Create a character vector with the names of the provinces of Costa Rica.\n\n-   Add to the above point vector an `NA`\n\n-   Create a numeric matrix with 3 columns and 3 rows\n\n-   Create a character matrix with 4 columns and 3 rows\n\n-   What class of object is 'iris' and what are its dimensions (hint: `iris` is an object available by default in your environment)?\n\n-   Create a data frame with a numeric column, a character column and a factor column.\n:::\n\n \n\n## Functions: objects that perform tasks\n\nAll functions are created with the `function()` function and follow the same structure:\n\n![](images/function.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund 2014</i></font>  \n\n### Integrated functions\n\n#### Basic functions\n\nR comes with many functions that you can use to do sophisticated tasks:\n\n```{r}\n# built in functions\nbi <- builtins(internal = FALSE)\n\nlength(bi)\n\n```\n\nSome functions come by default with R basic. New functions can be loaded as part of additional packages or even created by the user.\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    F(Functions) --> BF(Integraded functions)\n    BF --> OP(Operators)\n    BF --> BA(Basic functions)\n    F --> PF(Packages)\n    F --> UF(User defined functions)\n\n    class R,D,D1,D2,F largeText;\n\n    style F fill:#357BA266, stroke:#000, stroke-width:2px, color:#FFF, width:120px\n    style BF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n    style BA fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000\n    style OP fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000    \n    style PF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000000\n    style UF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\n#### Operators\n\nOperators are functions:\n\n```{r}\n\n1 + 1\n\n\n'+'(1, 1)\n\n2 * 3\n\n\n'*'(2, 3)\n\n\n```\n\n##### Most used operators\n\nArithmetic operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"+\" , \"sum\"),\nc(\"-\", \t\"subtraction\"),\nc(\"*\" ,\t\"multiplication\"),\nc(\"/\",\t\"division\"),\nc(\"^ or **\",\t\"exponential\"))\n\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator      \", \"Description  \")\n\nknitr::kable(d, row.names = F, escape = FALSE) |>\n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = FALSE, font_size = 18)\n\n```\n\n \n\n```{r}\n\n1 - 2\n\n1 + 2\n\n2 ^ 2\n\n2 ** 2\n\n2:3 %in% 2:4\n\n```\n\nLogical operators:\n\n```{r, echo=F, results='asis'}\nd <- matrix(\nc(\"<\", \"lower than\", \"<=\", \"lower than or equal to\",\">\", \"higher than\", \">=\",\t\"higher than or equal to\", \"==\", \"exactly the same\", \"!=\",\t\"different than\", \"!x\",\t\"Is not x\", \"x | y\", \"\tx O y\", \"x & y\", \"x Y y\",\"x %in% y\", \"correspondence\"), ncol = 2, byrow = TRUE)\n\n\n\nd <- as.data.frame(d)\n\nnames(d) <- c(\"Operator      \", \"Description  \")\n\nknitr::kable(d, row.names = F,  booktabs = TRUE, escape = FALSE) \n# |>\n # kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = FALSE, font_size = 18, protect_latex = TRUE)\n\n```\n\n \n\n```{r}\n\n1 < 2 \n\n1 > 2 \n\n1 <= 2 \n\n1 == 2\n\n1 != 2\n\n1 > 2 \n\n5 %in% 1:6\n\n5 %in% 1:4\n```\n\n \n\n::: {.alert .alert-warning}\n### Vectorization\n\nMost functions are vectorized:\n\n```{r, eval=F}\n\n1:6 * 1:6\n\n```\n\n![](images/vectorize.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:6\n```\n\n```{r}\n\n1:6 - 1:6\n```\n\nR recycles vectors of unequal length:\n\n```{r, eval=F}\n\n1:6 * 1:5\n\n```\n\n![](images/recycle.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n:::\n\n \n\n### Additional package functions\n\nThese are functions that are included in additional packages that can be installed and loaded into R. To be used the package must be installed and loaded, e.g. to use the `corTest` function of the “psych” package we must first install. The packages are installed from the CRAN (Comprehensive R Archive Network) server with the `install.packages()` function:\n\n```{r}\n#| eval: false\n\ninstall.packages(\"psych\")\n\n\n```\n\n... and load the package:\n\n```{r}\n\nlibrary(psych)\n\n```\n\nOnce 'psych' is installed and loaded, we can call the `corTest` function:\n\n```{r}\n\ncorTest(iris$Sepal.Length, iris$Sepal.Width)\n\n```\n\nThe use of external packages is the most useful feature of R since it allows to make use of an almost infinite number of specialized functions in different tasks as well as in very diverse fields of science and industry.\n\nWe can explore the packages available for R at [the CRAN website](https://cran.r-project.org/) (click on the “packages” link).\n\n::: {.alert .alert-info}\n## Exercise 2\n\n-   Search for a package you are interested in on CRAN\n\n-   Install the package and load it\n\n-   Run the example code of one of its functions\n:::\n\n## Object manipulation\n\n## Extracting subsets using indexing\n\nElements within objects can be called by indexing. To subset a vector simply call the position of the object using square brackets:\n\n```{r}\n\nx <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"a\")\n\nx[1]\n\nx[2]\n\nx[2:3]\n\nx[c(1,3)]\n\n```\n\n \n\nThe elements can be removed in the same way:\n\n```{r}\n\n\nx[-1]\n\nx[-c(1,3)]\n\n```\n\n \n\nThe position of the indices can also be given by a conditional evaluation. For instance, this code selects the elements in  `x` in which the value is \"a\":\n\n```{r}\n\nx[x == \"a\"]\n\n```\nNotice that there are two steps in this process. First we create a logical vector in which `TRUE` means that the condition is met and `FALSE` that is not:\n\n```{r}\n\nis_a <- x == \"a\"\n\nis_a\n```\n\n.. and then we use it to subset the data frame:\n\n```{r}\n\nx[is_a]\n\n```\nConditional evaluations can also be used for numeric vectors (e.g. '>', '==') and to subset bidimensional objects based on columns or rows.\n\nMatrices and data frames require 2 indices `[row, column]`:\n\n```{r}\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), nrow = 2)\n\nm[1, ]\n\nm[, 1]\n\nm[1, 1]\n\nm[-1, ]\n\nm[, -1]\n\nm[-1, -1]\n\n\ndf <- data.frame(\n  provincia = c(\"San José\", \"Guanacaste\", \"Guanacaste\"), \n  canton = c(\"Montes de Oca\", \"Nicoya\", \"Liberia\"), \n\tdistrito = c(\"San Rafael\", \"Nosara\", \"Nacascolo\")\n  )\n\ndf\n\ndf[1, ]\n\ndf[, 1]\n\ndf[1, 1]\n\ndf[-1, ]\n\ndf[, -1]\n\ndf[-1, -1]\n```\n\nData frames can also be subsetted using the name of the columns:\n```{r}\ndf[,\"provincia\"]\n\ndf[,c(\"provincia\", \"canton\")]\n\ndf$provincia\n```\n\n \n\nLists require 1 index between double square brackets `[[index]]`:\n\n```{r}\n\nl <- list(c(\"a\", \"b\"),\n          c(1, 2, 3),\n          c(FALSE, TRUE, FALSE, FALSE))\n\nl[[1]]\n\nl[[3]]\n\n```\n\n \n\nElements within lists can also be subsets in the same code string:\n\n```{r}\n\nl[[1]][1:2]\n\nl[[3]][2]\n\n```\n\n \n\n## Explore objects\n\nThe following basic R functions (default) can help us to explore the structure of objects:\n\n```{r, eval = TRUE}\n\nstr(df)\n\nnames(df)\n\ndim(df)\n\nnrow(df)\n\nncol(df)\n\nhead(df)\n\ntail(df)\n\ntable(df$provincia)\n\nclass(df)\n\n```\n\n```{r, eval = F}\n\nView(df)\n\n```\n\n \n\n::: {.alert .alert-info}\n## Exercise 3\n\n-   Use the example data `iris` to create a subset of data with only the observations of the species `setosa`.\n\n-   Now create a subset of data containing the observations of both `setosa` and `versicolor`.\n\n-   Also with `iris` create a subset of data with the observations for which `iris$Sepal.length` is greater than 6\n\n-   How many observations have a sepal length greater than 6?\n:::\n\n# Style matters\n\n<font size=\"2\"><a href=\"https://google.github.io/styleguide/Rguide.xml\">Based on google's R Style Guide</a></font>\n\n## File names\n\nFile names must end in .R and, of course, be self-explanatory:\n\n-   Good: graph_posterior_probability.R\n-   Bad: graf.R\n\n## Object names\n\nVariables and functions:\n\n-   Lowercase\n-   Use an underscore\n-   In general, names for variables and verbs for functions.\n-   Keep names concise and meaningful (not always easy).\n-   Avoid using names of existing functions of variables\n\n```{r, eval=F}\n\n- GOOD: day_one: day_1, mean_weight(),\n  \n- BAD: dayone, day1, first_day.of.month\n```\n\n \n\n## Syntax\n\n### Spaces\n\n-   Use spaces around operators and for arguments within a function.\n-   Always put a space after a comma, and never before (as in normal English).\n-   Place a space before the left parenthesis, except in a function call.\n\n```{r, eval=F}\n\n  - GOOD: \n          a <- rnorm(n = 10, sd = 10, mean = 1)\n          total <- sum(x[1, ])\n\n  - BAD: \n         a<-rnorm(n=10,sd=10,mean=1) \n         total <- sum(x[,1])  \n         \n```\n\n \n\n#### Brackets\n\n-   The opening key should never go on its own line.\n-   The closing brace must always be on its own line.\n-   You can omit braces when a block consists of only one statement\n\n```{r eval=F}\n\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim <- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim <- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim <- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim <- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim <- c(0, 0.06)\n           } \n```\n\n \n\n#### Create objects\n\n-   Use \\<-, instead of =\n\n```{r, eval = F}\n\n  - GOOD:\n         x <- 5 \n          \n  - BAD:\n         x = 5\n```\n\n \n\n#### Suggestions to add comments\n\n-   Comment your code\n-   Entire commented lines should begin with \\# and a space.\n-   Short comments can be placed after the code preceded by two spaces, #, and then a space.\n\n```{r, eval=F}\n\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: individuals per unit of time\",\n     xlab   = \"Individual count\",\n     ylab   = \"Frequency\")\n```\n\n \n\n------------------------------------------------------------------------\n\n \n\n# R Documentation\n\nMost R resources are very well documented. So **the first source of help you should turn to when writing R code is the R documentation itself**. All packages are documented in the same standard way. Familiarizing yourself with the format can simplify things a lot.\n\n## Package documentation\n\n![](images/packagepage.png){width=\"100%\"}\n\n \n\n## Reference manuals\n\nReference manuals are collections of documentation for all the functions of a package (only 1 per package):\n\n-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)\n\n-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)  \n\n## Documentation of functions\n\nAll functions (default or loaded packages) must have documentation that follows a standard format:\n\n```{r, eval=F}\n?mean\n\nhelp(\"mean\")\n\n```\n\n![](images/documentation.png){width=\"100%\"}\n\nThis documentation can also be displayed in Rstudio by pressing `F1` when the cursor is on the function name.\n\nIf you do not remember the function name try `apropos()`:\n\n```{r}\napropos(\"mean\")\n\n```\n\n \n\n## Vignettes (vignettes)\n\nVignettes are illustrative documents or case studies detailing the use of a package (optional, can be several per package).\n\nVignettes can be called directly from R:\n\n```{r}\nvgn <- browseVignettes() \n```\n\n```{r, eval = F}\nvignette()\n```\n\nTambién deberían aparecer en la página del paquete en CRAN.\n\n::: {.alert .alert-info}\n## Exercise 4\n\n-   What does the `cut()` function do?\n\n-   What is the `breaks` argument used for in `cut()`?\n\n-   Run the first 4 lines of code from the examples provided in the `cut()` documentation.\n\n-   How many bullets does the warbleR package have?\n:::\n\n------------------------------------------------------------------------\n\n# References {.unnumbered .unlisted}\n\n-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)\n-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\\\n-   Hands-On Programming with R (Grolemund, 2014)\n\n------------------------------------------------------------------------\n\n## Session info {.unnumbered .unlisted}\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n","srcMarkdownNoYaml":"\n\n```{r,echo=FALSE,message=FALSE}\n\noptions(\"digits\"=5)\noptions(\"digits.secs\"=3)\n\n# options to customize chunk outputs\nknitr::opts_chunk$set(\n  message = FALSE\n )\n\n```\n\n::: {.alert .alert-info}\n# Objective of the manual {.unnumbered .unlisted}\n\n-   To understand the basic blocks used in R programming\n\n-   To become familiar with the main sources of standardized documentation in R\n:::\n\n \n\n# What is R?\n\n-   A free [Domain-Specific Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis\n-   A collection of more than 21313 packages (as of 12-sept-2024)\n-   A large and active community in industry and academia\n-   A way to talk “directly” to your computer.\n\nHistorically:\n\n-   Based on the S programming language\n-   About 20 years old (lineage dates back to 1975 - almost 40 years ago)\n\n![](images/Rinterf.jpeg){width=\"100%\"}\n\n \n\n# Rstudio\n\nIntegrated development environment (IDE) for R. Includes:\n\n-   A console\n-   Syntax highlighting editor supporting direct code execution\n-   Tools for tracing, history, debugging, and workspace management\n\n![](images/Rstudio.jpeg){width=\"100%\"}\n\n##  \n\n```{r paleta}\n#| eval: false\n#| echo: false\n\n [1] \"#0B040566\" \"#28192F66\" \"#3B2F5E66\" \"#40498E66\"\n [5] \"#366A9F66\" \"#348AA666\" \"#38AAAC66\" \"#54C9AD66\"\n [9] \"#A0DFB966\" \"#DEF5E566\"\n\n```\n\n# Elements of the R language\n\nIn R everything that exists is an object and objects can be roughly classified into **objects that contain data** and objects that perform tasks, better known as **functions**:\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    R(Objects in R) --> D(Data objects)\n    D --> D1(1 dimension)\n    D --> D2(2 dimensions)\n    D --> DN(N dimensions)\n    R --> F(Functions)\n    \n    D1 --> V(Vector)\n    D1 --> L(List)\n    D2 --> M(Matrix)\n    D2 --> DF(Data Frame)\n    DN --> AR(Array)\n\n    F --> BF(Integraded functions)\n    BF --> BA(Basic functions)\n    BF --> OP(Operators)\n    F --> PF(Packages)\n    F --> UF(User defined functions)\n\n    class R,D,D1,D2,F largeText;\n\n    style R fill:#28192F66, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D fill:#40498E66, stroke:#000, stroke-width:2px, color:#FFF, width:180px\n    style D1 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D2 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style DN fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style F fill:#357BA266, stroke:#000, stroke-width:2px, color:#FFF, width:120px\n    style DF fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style AR fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style V fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style M fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style L fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style BF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n    style BA fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000\n    style OP fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000    \n    style PF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000000\n    style UF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\nTo feel comfortable programming in R it is necessary to know at all times what kind of objects we are working with. The `class()` and `str()` functions allow us to evaluate the structure of objects. We will be using them repeatedly in this tutorial.\n\n## Objects containing data\n\nThe basic data structure in R is the vector. With this all other object classes are built. To understand classes it is useful to think about the number of dimensions (1, 2 or more) and types of data they can contain: homogeneous (a single element type) or heterogeneous (or multiple element types).\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    D(Data objects) --> D1(1 dimension)\n    D --> D2(2 dimensions)\n    D1 --> V(Vector)\n    D1 --> L(List)\n    D2 --> M(Matrix)\n    D2 -->  DF(Data Frame)\n\n    style D fill:#40498E66, stroke:#000, stroke-width:2px, color:#FFF, width:180px\n    style D1 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style D2 fill:#348AA666, stroke:#000, stroke-width:2px, color:#FFF, width:140px\n    style DF fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style V fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style M fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n    style L fill:#49C1AD66, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\n```{r, echo=FALSE}\nd <- data.frame(\n \tc(\"Atomic vector\", \"List\"),\n\tc(\"Matrix\", \"Data frame\"),\nc(\"Array\", \"\"))\n\n\nd <- t(d)\n\ncolnames(d) <-c(\"Homogeneous\",\t\"Heterogeneous\")\n\nrownames(d) <-c(\"1d\",\t\"2d\", \"nd\")\n\nas.data.frame(d)\n\n```\n\n### 1 dimension objects\n\nThere are two basic types of vectors: atomic vectors and lists.\n\nThey have three common properties:\n\n-   Type, `typeof()` (class/mode).\n-   Length, `length()` (number of elements)\n-   Attributes, `attributes()` (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be of the same type, while the elements of a list can have different types.\n\n#### Atomic vectors\n\nTypes of atomic vectors:\n\n-   Logical [(Boolean)](https://en.wikipedia.org/wiki/Boolean)\n-   Integer\n-   Numeric (double)\n-   Characters\n-   Factors\n\nVectors are constructed with the `c()` function, they can be numeric:\n\n```{r}\nx <- 1\nx1 <- c(1)\n\nall.equal(x, x1)\n\nclass(x)\n```\n\nCharacters:\n\n```{r}\ny <- \"something\"\n\nclass(y)\n```\n\nLogical:\n\n```{r}\nz <- TRUE\n\nclass(z)\n```\n\nOr factor:\n\n```{r}\nq <- factor(1)\n\nclass(q)\n\n```\n\nTherefore, the individual numbers or strings are actually vectors of length one:\n\n```{r}\n\nclass(1)\n\nclass(\"a\")\n```\n\nVectors can only contain elements of the same type. Different types of elements will be forced to the most flexible type:\n\n```{r}\n\nx <- c(1, 2, \"a\")\n\nx\n\nclass(x)\n\n```\n\nMissing values are specified with `NA`, which is a logical vector of length 1. `NA` will always be interpreted to the correct type if used inside `c()`:\n\n```{r}\n\nv <- c(10, 11, NA)\n\nclass(v)\n\nv <- c(\"a\", \"b\", NA)\n\nclass(v)\n\n```\n\n<br>\n\n::: {.alert .alert-warning}\n#### Factors\n\nVectors with factors are very similar to character vectors. However, a factor can only contain predefined values, known as levels. Attributes are used to define the levels of the factor.\n\nFactors are built on integer vectors using two attributes:\n\n-   \"factor\" class: makes them behave differently from normal character vectors.\n-   levels: defines the set of allowed values\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\nlevels(x)\n\n\nstr(x)\n\n```\n\nThe factors look like character vectors, but are actually integers:\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n```\n:::\n\n#### Lists\n\nCan contain objects of different classes and sizes. Lists are constructed with list():\n\n```{r}\n\nl <- list(\"a\", 1, FALSE)\n\nl\n\nclass(l)\n\nstr(l)\n\n```\n\nIn fact, they can be seen as drawers where you can put any other type of object:\n\n```{r}\n\n\nl <- list(c(\"a\", \"b\"), \n          c(1, 2, 3, 4), \n          c(FALSE, TRUE, FALSE))\n\nl\n\nstr(l)\n\n```\n\n### 2-dimensional objects\n\n#### Matrices\n\nAll elements are of the same type:\n\n```{r}\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), nrow = 2)\n\ndim(m)\n\nm\n\nclass(m)\n\n\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", 1), nrow = 2)\nm\n\n\n```\n\n#### Data Frames\n\nSpecial case of lists. It can contain elements of different types:\n\n```{r}\n\nm <-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\ndim(m)\n\nm\n\nclass(m)\n\nis.data.frame(m)\n\nis.list(m)\n\nstr(m)\n\n```\n\nBut the vectors must have the same length:\n\n```{r, error = TRUE}\n\nm <-\n  data.frame(\n    ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"),\n    size = c(1, 2, 3, 4, 5, 6),\n    observed = c(FALSE, TRUE, FALSE, FALSE, FALSE)\n  )\n\n```\n\n \n\n::: {.alert .alert-info}\n## Exercise 1\n\n-   Create a numeric vector with 8 elements containing positive and negative numbers.\n\n-   Create a character vector with the names of the provinces of Costa Rica.\n\n-   Add to the above point vector an `NA`\n\n-   Create a numeric matrix with 3 columns and 3 rows\n\n-   Create a character matrix with 4 columns and 3 rows\n\n-   What class of object is 'iris' and what are its dimensions (hint: `iris` is an object available by default in your environment)?\n\n-   Create a data frame with a numeric column, a character column and a factor column.\n:::\n\n \n\n## Functions: objects that perform tasks\n\nAll functions are created with the `function()` function and follow the same structure:\n\n![](images/function.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund 2014</i></font>  \n\n### Integrated functions\n\n#### Basic functions\n\nR comes with many functions that you can use to do sophisticated tasks:\n\n```{r}\n# built in functions\nbi <- builtins(internal = FALSE)\n\nlength(bi)\n\n```\n\nSome functions come by default with R basic. New functions can be loaded as part of additional packages or even created by the user.\n\n```{mermaid}\n\nflowchart LR\n    classDef largeText font-size:18px, padding:15px;\n\n    F(Functions) --> BF(Integraded functions)\n    BF --> OP(Operators)\n    BF --> BA(Basic functions)\n    F --> PF(Packages)\n    F --> UF(User defined functions)\n\n    class R,D,D1,D2,F largeText;\n\n    style F fill:#357BA266, stroke:#000, stroke-width:2px, color:#FFF, width:120px\n    style BF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n    style BA fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000\n    style OP fill:#DEF5E566, stroke:#000, stroke-width:2px, color:#000    \n    style PF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000000\n    style UF fill:#A0DFB966, stroke:#000, stroke-width:2px, color:#000\n\n\n```\n\n#### Operators\n\nOperators are functions:\n\n```{r}\n\n1 + 1\n\n\n'+'(1, 1)\n\n2 * 3\n\n\n'*'(2, 3)\n\n\n```\n\n##### Most used operators\n\nArithmetic operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"+\" , \"sum\"),\nc(\"-\", \t\"subtraction\"),\nc(\"*\" ,\t\"multiplication\"),\nc(\"/\",\t\"division\"),\nc(\"^ or **\",\t\"exponential\"))\n\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator      \", \"Description  \")\n\nknitr::kable(d, row.names = F, escape = FALSE) |>\n  kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = FALSE, font_size = 18)\n\n```\n\n \n\n```{r}\n\n1 - 2\n\n1 + 2\n\n2 ^ 2\n\n2 ** 2\n\n2:3 %in% 2:4\n\n```\n\nLogical operators:\n\n```{r, echo=F, results='asis'}\nd <- matrix(\nc(\"<\", \"lower than\", \"<=\", \"lower than or equal to\",\">\", \"higher than\", \">=\",\t\"higher than or equal to\", \"==\", \"exactly the same\", \"!=\",\t\"different than\", \"!x\",\t\"Is not x\", \"x | y\", \"\tx O y\", \"x & y\", \"x Y y\",\"x %in% y\", \"correspondence\"), ncol = 2, byrow = TRUE)\n\n\n\nd <- as.data.frame(d)\n\nnames(d) <- c(\"Operator      \", \"Description  \")\n\nknitr::kable(d, row.names = F,  booktabs = TRUE, escape = FALSE) \n# |>\n # kableExtra::kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"), full_width = FALSE, font_size = 18, protect_latex = TRUE)\n\n```\n\n \n\n```{r}\n\n1 < 2 \n\n1 > 2 \n\n1 <= 2 \n\n1 == 2\n\n1 != 2\n\n1 > 2 \n\n5 %in% 1:6\n\n5 %in% 1:4\n```\n\n \n\n::: {.alert .alert-warning}\n### Vectorization\n\nMost functions are vectorized:\n\n```{r, eval=F}\n\n1:6 * 1:6\n\n```\n\n![](images/vectorize.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:6\n```\n\n```{r}\n\n1:6 - 1:6\n```\n\nR recycles vectors of unequal length:\n\n```{r, eval=F}\n\n1:6 * 1:5\n\n```\n\n![](images/recycle.png){width=\"100%\"}\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n:::\n\n \n\n### Additional package functions\n\nThese are functions that are included in additional packages that can be installed and loaded into R. To be used the package must be installed and loaded, e.g. to use the `corTest` function of the “psych” package we must first install. The packages are installed from the CRAN (Comprehensive R Archive Network) server with the `install.packages()` function:\n\n```{r}\n#| eval: false\n\ninstall.packages(\"psych\")\n\n\n```\n\n... and load the package:\n\n```{r}\n\nlibrary(psych)\n\n```\n\nOnce 'psych' is installed and loaded, we can call the `corTest` function:\n\n```{r}\n\ncorTest(iris$Sepal.Length, iris$Sepal.Width)\n\n```\n\nThe use of external packages is the most useful feature of R since it allows to make use of an almost infinite number of specialized functions in different tasks as well as in very diverse fields of science and industry.\n\nWe can explore the packages available for R at [the CRAN website](https://cran.r-project.org/) (click on the “packages” link).\n\n::: {.alert .alert-info}\n## Exercise 2\n\n-   Search for a package you are interested in on CRAN\n\n-   Install the package and load it\n\n-   Run the example code of one of its functions\n:::\n\n## Object manipulation\n\n## Extracting subsets using indexing\n\nElements within objects can be called by indexing. To subset a vector simply call the position of the object using square brackets:\n\n```{r}\n\nx <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"a\")\n\nx[1]\n\nx[2]\n\nx[2:3]\n\nx[c(1,3)]\n\n```\n\n \n\nThe elements can be removed in the same way:\n\n```{r}\n\n\nx[-1]\n\nx[-c(1,3)]\n\n```\n\n \n\nThe position of the indices can also be given by a conditional evaluation. For instance, this code selects the elements in  `x` in which the value is \"a\":\n\n```{r}\n\nx[x == \"a\"]\n\n```\nNotice that there are two steps in this process. First we create a logical vector in which `TRUE` means that the condition is met and `FALSE` that is not:\n\n```{r}\n\nis_a <- x == \"a\"\n\nis_a\n```\n\n.. and then we use it to subset the data frame:\n\n```{r}\n\nx[is_a]\n\n```\nConditional evaluations can also be used for numeric vectors (e.g. '>', '==') and to subset bidimensional objects based on columns or rows.\n\nMatrices and data frames require 2 indices `[row, column]`:\n\n```{r}\nm <- matrix(c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"), nrow = 2)\n\nm[1, ]\n\nm[, 1]\n\nm[1, 1]\n\nm[-1, ]\n\nm[, -1]\n\nm[-1, -1]\n\n\ndf <- data.frame(\n  provincia = c(\"San José\", \"Guanacaste\", \"Guanacaste\"), \n  canton = c(\"Montes de Oca\", \"Nicoya\", \"Liberia\"), \n\tdistrito = c(\"San Rafael\", \"Nosara\", \"Nacascolo\")\n  )\n\ndf\n\ndf[1, ]\n\ndf[, 1]\n\ndf[1, 1]\n\ndf[-1, ]\n\ndf[, -1]\n\ndf[-1, -1]\n```\n\nData frames can also be subsetted using the name of the columns:\n```{r}\ndf[,\"provincia\"]\n\ndf[,c(\"provincia\", \"canton\")]\n\ndf$provincia\n```\n\n \n\nLists require 1 index between double square brackets `[[index]]`:\n\n```{r}\n\nl <- list(c(\"a\", \"b\"),\n          c(1, 2, 3),\n          c(FALSE, TRUE, FALSE, FALSE))\n\nl[[1]]\n\nl[[3]]\n\n```\n\n \n\nElements within lists can also be subsets in the same code string:\n\n```{r}\n\nl[[1]][1:2]\n\nl[[3]][2]\n\n```\n\n \n\n## Explore objects\n\nThe following basic R functions (default) can help us to explore the structure of objects:\n\n```{r, eval = TRUE}\n\nstr(df)\n\nnames(df)\n\ndim(df)\n\nnrow(df)\n\nncol(df)\n\nhead(df)\n\ntail(df)\n\ntable(df$provincia)\n\nclass(df)\n\n```\n\n```{r, eval = F}\n\nView(df)\n\n```\n\n \n\n::: {.alert .alert-info}\n## Exercise 3\n\n-   Use the example data `iris` to create a subset of data with only the observations of the species `setosa`.\n\n-   Now create a subset of data containing the observations of both `setosa` and `versicolor`.\n\n-   Also with `iris` create a subset of data with the observations for which `iris$Sepal.length` is greater than 6\n\n-   How many observations have a sepal length greater than 6?\n:::\n\n# Style matters\n\n<font size=\"2\"><a href=\"https://google.github.io/styleguide/Rguide.xml\">Based on google's R Style Guide</a></font>\n\n## File names\n\nFile names must end in .R and, of course, be self-explanatory:\n\n-   Good: graph_posterior_probability.R\n-   Bad: graf.R\n\n## Object names\n\nVariables and functions:\n\n-   Lowercase\n-   Use an underscore\n-   In general, names for variables and verbs for functions.\n-   Keep names concise and meaningful (not always easy).\n-   Avoid using names of existing functions of variables\n\n```{r, eval=F}\n\n- GOOD: day_one: day_1, mean_weight(),\n  \n- BAD: dayone, day1, first_day.of.month\n```\n\n \n\n## Syntax\n\n### Spaces\n\n-   Use spaces around operators and for arguments within a function.\n-   Always put a space after a comma, and never before (as in normal English).\n-   Place a space before the left parenthesis, except in a function call.\n\n```{r, eval=F}\n\n  - GOOD: \n          a <- rnorm(n = 10, sd = 10, mean = 1)\n          total <- sum(x[1, ])\n\n  - BAD: \n         a<-rnorm(n=10,sd=10,mean=1) \n         total <- sum(x[,1])  \n         \n```\n\n \n\n#### Brackets\n\n-   The opening key should never go on its own line.\n-   The closing brace must always be on its own line.\n-   You can omit braces when a block consists of only one statement\n\n```{r eval=F}\n\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim <- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim <- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim <- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim <- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim <- c(0, 0.06)\n           } \n```\n\n \n\n#### Create objects\n\n-   Use \\<-, instead of =\n\n```{r, eval = F}\n\n  - GOOD:\n         x <- 5 \n          \n  - BAD:\n         x = 5\n```\n\n \n\n#### Suggestions to add comments\n\n-   Comment your code\n-   Entire commented lines should begin with \\# and a space.\n-   Short comments can be placed after the code preceded by two spaces, #, and then a space.\n\n```{r, eval=F}\n\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: individuals per unit of time\",\n     xlab   = \"Individual count\",\n     ylab   = \"Frequency\")\n```\n\n \n\n------------------------------------------------------------------------\n\n \n\n# R Documentation\n\nMost R resources are very well documented. So **the first source of help you should turn to when writing R code is the R documentation itself**. All packages are documented in the same standard way. Familiarizing yourself with the format can simplify things a lot.\n\n## Package documentation\n\n![](images/packagepage.png){width=\"100%\"}\n\n \n\n## Reference manuals\n\nReference manuals are collections of documentation for all the functions of a package (only 1 per package):\n\n-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)\n\n-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)  \n\n## Documentation of functions\n\nAll functions (default or loaded packages) must have documentation that follows a standard format:\n\n```{r, eval=F}\n?mean\n\nhelp(\"mean\")\n\n```\n\n![](images/documentation.png){width=\"100%\"}\n\nThis documentation can also be displayed in Rstudio by pressing `F1` when the cursor is on the function name.\n\nIf you do not remember the function name try `apropos()`:\n\n```{r}\napropos(\"mean\")\n\n```\n\n \n\n## Vignettes (vignettes)\n\nVignettes are illustrative documents or case studies detailing the use of a package (optional, can be several per package).\n\nVignettes can be called directly from R:\n\n```{r}\nvgn <- browseVignettes() \n```\n\n```{r, eval = F}\nvignette()\n```\n\nTambién deberían aparecer en la página del paquete en CRAN.\n\n::: {.alert .alert-info}\n## Exercise 4\n\n-   What does the `cut()` function do?\n\n-   What is the `breaks` argument used for in `cut()`?\n\n-   Run the first 4 lines of code from the examples provided in the `cut()` documentation.\n\n-   How many bullets does the warbleR package have?\n:::\n\n------------------------------------------------------------------------\n\n# References {.unnumbered .unlisted}\n\n-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)\n-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\\\n-   Hands-On Programming with R (Grolemund, 2014)\n\n------------------------------------------------------------------------\n\n## Session info {.unnumbered .unlisted}\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"highlight-style":"pygments","css":["styles.css"],"output-file":"r_basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.551","toc-location":"left","toc-title":"Contents","code-copy":true,"date":"today","title":"<font size=\"7\"><b>Basic elements of the R language</b></font>"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}