{"title":"R basics","markdown":{"yaml":{"title":"R basics"},"headingText":"**Objetives**","headingAttr":{"id":"","classes":["unnumbered","unlisted"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r,echo=FALSE,message=FALSE}\n\noptions(\"digits\"=5)\noptions(\"digits.secs\"=3)\n\n```\n\n \n\n::: {.alert .alert-info}\n\n-   Revisit the basic syntax and data structures in R\n\n-   Get familiar with documentation and help resources\n:::\n\n \n\n## What is R?\n\n-   A **free** [Domain-Specific-Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis\n-   A collection of over 19514 (may-12-2024) libraries\n-   A large and active community across industry and academia\n-   **A way to talk \"directly\" to your computer**\n\nHistorically:\n\n-   Based on the S Programming Language\n-   Around 20 years old (Lineage dates from 1975 - almost 40 years ago)\n\n<img src=\"images/Rinterf.jpeg\" alt=\"R\" height=\"600\" width=\"800\"/>\n\n \n\n## Rstudio\n\nIntegrated development environment (IDE) for R. Includes:\n\n-   A console\n-   Syntax-highlighting editor that supports direct code execution\n-   Tools for plotting, history, debugging and workspace management\n\n<img src=\"images/Rstudio.jpeg\" alt=\"R\" height=\"500\" width=\"800\"/>\n\n------------------------------------------------------------------------\n\n## Elements of the R language\n\n-   Vectors\n-   Lists\n-   Matrices\n-   Data Frames\n-   Functions (including operators)\n-   Attributes\n-   ~~Tables~~\n-   ~~Arrays~~\n-   ~~Environments~~\n\n<font size=\"5\">Data structure</font>\n\nThe basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.\n\nThey have three common properties:\n\n-   Type, `typeof()` (\\~ class/mode)\n-   Length, `length()` (number of elements)\n-   Attributes, `attributes()` (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\n\n```{r, echo=F}\n\nd2 <- data.frame(\n \tc(\"Atomic vector\", \"List\"),\n\tc(\"Matrix\", \"Data frame\"),\nc(\"Array\", \"\"))\n\n\nd2 <- t(d2)\n\ncolnames(d2) <-c(\"Homogeneous\",\t\"Heterogeneous\")\n\nrownames(d2) <-c(\"1d\",\t\"2d\", \"nd\")\n\nd2 <- as.data.frame(d2)\n\nx <- d2\nx\n```\n\n \n\nR has no 0-dimensional elements (scalars). Individual numbers or strings are actually vectors of length one.\n\n<font size=\"5\">Atomic vectors</font>\n\nTypes of atomic vectors:\n\n-   Logical [(boolean)](https://en.wikipedia.org/wiki/Boolean)\n-   Integer\n-   Numeric (double)\n-   Character\n\nVectors are built using `c()`:\n\n```{r,collapse=TRUE}\n\nx <- 1\nx1 <- c(1)\n\nall.equal(x, x1)\n\nclass(x)\n\ny <- \"something\"\n\nclass(y)\n\nw <- 1L\n\nclass(w)\n \nz <- TRUE\n\nclass(z)\n\nq <- factor(1)\n\nclass(q)\n\n```\n\n \n\nVectors can only contain entries of the same type. Different types will be coerced to the most flexible type:\n\n```{r, collapse=TRUE}\n\nv <- c(10, 11, 12, 13)\n\nclass(v)\n\nis.integer(v)\n\ny <- c(\"Amazona\", \"Ara\", \"Eupsittula\", \"Myiopsitta\")\n\nclass(y)\n\nis.integer(y)\n\nx <- c(1,2,3, \"Myiopsitta\")\n\nx\n\nclass(x)\n\n```\n\n \n\nMissing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used inside `c()`:\n\n```{r, collapse=TRUE}\n\nv <- c(10, 11, 12, 13, NA)\n\nclass(v)\n\nv <- c(letters[1:3], NA)\n\nclass(v)\n\n```\n\n \n\n<font size=\"5\">Lists</font>\n\nCan contain objects of different classes and sizes. Lists are built using list():\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl\n\nclass(l)\n\nstr(l)\n\n```\n\n... and dimensions:\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5, 6), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE), \n          l)\n\nstr(l)\n\nl2 <- list(l, l)\n\nstr(l2)\n\n```\n\n \n\n<font size=\"5\">Attributes</font>\n\nObjects can have attributes. Attributes allow to store metadata about the object. Attributes are kind of named lists. Attributes can be accessed individually with `attr()` or all at once (as a list) with `attributes()`:\n\n```{r}\ny <- 1:10\n\nmean(y)\n\nattr(y, \"my_attribute\") <- \"This is an attribute\"\n\n\nattr(y, \"my_attribute\")\n\n\nstr(y)\n```\n\n \n\nMost attributes are lost when modifying a vector:\n\n```{r}\n\nattributes(y[1])\n\n```\n\n \n\nThe only attributes not lost are the three most important:\n\n-   Names, a character vector giving each element a name, described in names\n-   Dimensions\n-   Class\n\n------------------------------------------------------------------------\n\n```{r}\nw <- structure(c(a =1, b = 2), my_attribute = \"This is not an apple\")\n\nattributes(w)\n\nattributes(w[1])\n\nclass(w[1])\n\n```\n\n \n\n<font size=\"5\">Factors</font>\n\nAttributes are used to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data.\n\nFactors are built on top of integer vectors using two attributes:\n\n-   class \"factor\": makes them behave differently from regular integer vectors\n-   levels: defines the set of allowed values\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\nlevels(x)\n\n\nstr(x)\n\n```\n\n \n\nFactors look like character vectors but they are actually integers:\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n```\n\n \n\n<font size=\"5\">Matrices</font>\n\nAll entries are of the same type:\n\n```{r}\nm <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\nm\n\nclass(m)\n\n\nm <- matrix(c(1, 2, 3, 11, 12,\"13\"), nrow = 2)\nm\n\n\n```\n\n \n\n<font size=\"5\">Data frames</font>\n\nSpecial case of lists. Can contain entries of different types:\n\n```{r}\n\nm <- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\ndim(m)\n\nm\n\nclass(m)\n\nis.data.frame(m)\n\nis.list(m)\n\nstr(m)\n\n```\n\n \n\nBut vectors should have the same length:\n\n```{r, error = TRUE}\n\nm <- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5, 6), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\n```\n\n \n\n------------------------------------------------------------------------\n\n## Data subsetting\n\n<font size=\"5\">Indexing</font>\n\nElements within objects can be called by indexing. To subset a vector simply call the object position using square brackets:\n\n```{r}\n\nx <- c(1, 3, 4, 10, 15, 20, 50, 1, 6)\n\nx[1]\n\nx[2]\n\nx[2:3]\n\nx[c(1,3)]\n```\n\n \n\nElements can be removed in the same way:\n\n```{r}\n\n\nx[-1]\n\nx[-c(1,3)]\n\n```\n\n \n\nMatrices and data frames required 2 indices `[row, column]`:\n\n```{r}\n\nm <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\nm[1, ]\n\nm[, 1]\n\nm[1, 1]\n\nm[-1, ]\n\nm[, -1]\n\nm[-1, -1]\n\n\ndf <- data.frame(family = c(\"Psittacidae\", \"Trochilidae\", \n                            \"Psittacidae\"), \n  genus = c(\"Amazona\", \"Phaethornis\", \"Ara\"), \n\tspecies = c(\"aestiva\", \"philippii\", \"ararauna\"))\n\ndf\n\ndf[1, ]\n\ndf[, 1]\n\ndf[1, 1]\n\ndf[-1, ]\n\ndf[, -1]\n\ndf[-1, -1]\n\ndf[,\"family\"]\n\ndf[,c(\"family\", \"genus\")]\n\n```\n\n \n\nLists require 1 index within double square brackets `[[index]]`:\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, 4, 5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl[[1]]\n\nl[[3]]\n\n```\n\n \n\nElements within lists can also be subset in the same string of code:\n\n```{r}\n\nl[[1]][1:2]\n\nl[[3]][2]\n\n```\n\n \n\n<font size=\"5\">Exploring objects</font>\n\n```{r, eval = TRUE}\n\nstr(df)\n\nnames(df)\n\ndim(df)\n\nnrow(df)\n\nncol(df)\n\nhead(df)\n\ntail(df)\n\ntable(df$genus)\n\ntypeof(df)\n\n```\n\n```{r, eval = F}\nView(df)\n\n```\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Using the example data `iris` to create a data subset with only the observations of the species 'setosa'\n\n-   Now create a data subset containing the observations of both 'setosa' and 'versicolor'\n\n-   Also with `iris` create a data subset with the observations for which `iris$Sepal.length` is higher than 6\n\n-   How many observations have a sepal length higher than 6?\n:::\n\n \n\n------------------------------------------------------------------------\n\n \n\n## Functions\n\nAll functions are created by the function `function()` and follow the same structure:\n\n<img src=\"images/function.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund 2014</i></font>  \n\nR comes with many functions that you can use to do sophisticated tasks:\n\n```{r}\n# built in functions\nbi <- builtins()\n\nlength(bi)\n\nsample(bi, 10)\n\n```\n\n \n\nOperators are functions:\n\n```{r}\n\n1 + 1\n\n\n'+'(1, 1)\n\n2 * 3\n\n\n'*'(2, 3)\n\n\n```\n\n \n\n<font size=\"5\">Most commonly used R operators</font>\n\nArithmetic operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"+\" , \"addition\"),\nc(\"-\", \t\"subtraction\"),\nc(\"*\" ,\t\"multiplication\"),\nc(\"/\",\t\"division\"),\nc(\"^ or **\",\t\"exponent\"),\nc(\"x %% y\",\t\"modulus (x mod y)\"),\nc(\"x %/% y\",\t\"integer division\"))\n\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator      \", \"Description   \")\n\nd\n\n```\n\n \n\n```{r}\n\n1 - 2\n\n1 + 2\n\n2 ^ 2\n\n\n```\n\n \n\nLogical operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"<\", \"less than\"),\nc(\"<=\", \"less than or equal to\"),\nc(\">\", \"greater than\"),\nc(\">=\",\t\"greater than or equal to\"),\nc(\"==\", \"exactly equal to\"),\nc(\"!=\",\t\"not equal to\"),\nc(\"!x\",\t\"Not x\"),\nc(\"x | y\", \"\tx OR y\"),\nc(\"x & y\", \t\"x AND y\"),\nc(\"x %in% y\",\t\"match\"))\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator   \", \"Description   \")\n\nd\n\n```\n\n \n\n```{r}\n\n1 < 2 \n\n1 > 2 \n\n1 <= 2 \n\n1 == 2\n\n1 != 2\n\n1 > 2 \n\n5 %in% 1:6\n\n5 %in% 1:4\n```\n\n \n\nMost functions are vectorized:\n\n```{r, eval=F}\n\n1:6 * 1:6\n\n```\n\n<img src=\"images/vectorize.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:6\n```\n\n```{r}\n\n1:6 - 1:6\n```\n\nR recycles vectors of unequal length:\n\n```{r, eval=F}\n\n1:6 * 1:5\n\n```\n\n<img src=\"images/recycle.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:5\n\n```\n\n```{r}\n\n1:6 + 1:5\n\n```\n\n \n\n------------------------------------------------------------------------\n\n## Style matters\n\n<font size=\"2\"><a href=\"https://google.github.io/styleguide/Rguide.xml\">Based on google's R Style Guide</a></font>\n\n<font size=\"5\">File names</font>\n\nFile names should end in .R and, of course, be meaningful:\n\n-   GOOD: predict_ad_revenue.R\n-   BAD: foo.R\n\n<font size=\"5\">Object names</font>\n\nVariables and functions:\n\n-   Lowercase\n-   Use an underscore (\\_) (HW style)\n-   Generally, nouns for variables and verbs for functions\n-   Strive for names that are concise and meaningful (not always easy)\n-   Avoid using names of existing functions of variables\n\n```{r, eval=F}\n\n  - GOOD: day_one: day_1, mean.day(),\n  \n  - BAD: dayOne, day1, firstDay_of.month, mean <- function(x) sum(x), c <- 10\n```\n\n \n\n<font size=\"5\">Syntax</font>\n\nSpacing:\n\n-   Use spaces around operators and for argument within a function\n-   Always put a space after a comma, and never before (just like in regular English)\n-   Place a space before left parenthesis, except in a function call\n\n```{r, eval=F}\n\n  - GOOD: \n          a <- rnorm(n = 10, sd = 10, mean = 1)\n          tab.prior <- table(df[df$days.from.opt < 0, \"campaign.id\"])\n          total <- sum(x[, 1])\n          total <- sum(x[1, ])\n          if (debug)\n          mean(1:10)\n          \n  - BAD: \n         a<-rnorm(n=10,sd=10,mean=1)\n         tab.prior <- table(df[df$days.from.opt<0, \"campaign.id\"])  # Needs spaces around '<'\n         tab.prior <- table(df[df$days.from.opt < 0,\"campaign.id\"])  # Needs a space after the comma\n         tab.prior<- table(df[df$days.from.opt < 0, \"campaign.id\"])  # Needs a space before <-\n         tab.prior<-table(df[df$days.from.opt < 0, \"campaign.id\"])  # Needs spaces around <-\n         total <- sum(x[,1])  # Needs a space after the comma\n         total <- sum(x[ ,1])  # Needs a space after the comma, not before  \n         if(debug) # Needs a space before parenthesis\n         mean (1:10) # ) # Extra space before parenthesis\n\n```\n\n \n\nCurly braces:\n\n-   An opening curly brace should never go on its own line\n-   Closing curly brace should always go on its own line\n-   You may omit curly braces when a block consists of a single statement\n\n```{r eval=F}\n\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim <- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim <- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim <- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim <- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim <- c(0, 0.06)\n           } \n```\n\n \n\nAssigments:\n\n-   Use \\<-, not =\n\n```{r, eval = F}\n\n  - GOOD:\n         x <- 5 \n          \n  - BAD:\n         x = 5\n```\n\n \n\nCommenting guidelines:\n\n-   Comment your code\n-   Entire commented lines should begin with \\# and one space\n-   Short comments can be placed after code preceded by two spaces, #, and then one space\n\n```{r, eval=F}\n\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: fraction budget spent by campaignid\",\n     xlab   = \"Fraction of budget spent\",\n     ylab   = \"Frequency (count of campaignids)\")\n```\n\n \n\nGeneral Layout and Ordering (google style):\n\n-   Copyright statement comment (?)\n-   Author comment\n-   File description comment, including purpose of program, inputs, and outputs\n-   source() and library() statements\n-   Function definitions\n-   Executed statements, if applicable (e.g., print, plot)\n\n------------------------------------------------------------------------\n\n \n\n## R documentation\n\nMost R resources are extremely well documented. So the first source for help you should go to when writting R code is the R documention itself. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.\n\n<font size=\"5\">Package documentation</font>\n\n<img src=\"images/packagepage.png\" alt=\"R\" height=\"900\" width=\"800\" style=\"border:3px solid gray\"/>\n\n \n\n<font size=\"5\">Reference manuals</font>\n\nReference manuals are collections of the documentation for all functions in a package (only 1 per package):\n\n-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)\n\n-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)\n\n \n\n<font size=\"5\">Function documentation</font>\n\nAll functions (default or from loaded packages) must have a documentation that follows a standard format:\n\n```{r, eval=F}\n?mean\n\nhelp(\"mean\")\n\n```\n\n<img src=\"images/documentation.png\" alt=\"R\" height=\"700\" width=\"800\" style=\"border:3px solid gray\"/>  \n\nThis documentation can also be shown in Rstudio by pressing `F1` when the cursor is on the function name\n\n \n\nIf you don't recall the function name try `apropos()`:\n\n```{r}\napropos(\"mean\")\n\n```\n\n \n\n<font size=\"5\">Vignettes</font>\n\nVignettes are illustrative documents or study cases detailing the use of a package (optional, can be several per package).\n\nVignettes can be called directly from R:\n\n```{r}\nvgn <- browseVignettes() \n```\n\n```{r, eval = F}\nvignette()\n```\n\nThey should also be listed in the package CRAN page.\n\n \n\n<font size=\"5\">Demonstrations</font>\n\nPackages may also include extended code demonstrations ('demos'). To list demos in a package run `demo(\"package name\")`:\n\n```{r, eval=F}\ndemo(package=\"stats\")\n\n# call demo directly\ndemo(\"nlm\")\n\n```\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   What does the function `cut()` do?\n\n-   What is the `breaks` argument in `cut()` used for?\n\n-   Run the first 4 lines of code in the examples supplied in the `cut()` documentation\n\n-   How many vignettes does the package warbleR has?\n:::\n\n \n\n------------------------------------------------------------------------\n\n## References\n\n-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)\n-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\\\n-   Hands-On Programming with R (Grolemund, 2014)\n","srcMarkdownNoYaml":"\n\n```{r,echo=FALSE,message=FALSE}\n\noptions(\"digits\"=5)\noptions(\"digits.secs\"=3)\n\n```\n\n \n\n::: {.alert .alert-info}\n## **Objetives** {.unnumbered .unlisted}\n\n-   Revisit the basic syntax and data structures in R\n\n-   Get familiar with documentation and help resources\n:::\n\n \n\n## What is R?\n\n-   A **free** [Domain-Specific-Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis\n-   A collection of over 19514 (may-12-2024) libraries\n-   A large and active community across industry and academia\n-   **A way to talk \"directly\" to your computer**\n\nHistorically:\n\n-   Based on the S Programming Language\n-   Around 20 years old (Lineage dates from 1975 - almost 40 years ago)\n\n<img src=\"images/Rinterf.jpeg\" alt=\"R\" height=\"600\" width=\"800\"/>\n\n \n\n## Rstudio\n\nIntegrated development environment (IDE) for R. Includes:\n\n-   A console\n-   Syntax-highlighting editor that supports direct code execution\n-   Tools for plotting, history, debugging and workspace management\n\n<img src=\"images/Rstudio.jpeg\" alt=\"R\" height=\"500\" width=\"800\"/>\n\n------------------------------------------------------------------------\n\n## Elements of the R language\n\n-   Vectors\n-   Lists\n-   Matrices\n-   Data Frames\n-   Functions (including operators)\n-   Attributes\n-   ~~Tables~~\n-   ~~Arrays~~\n-   ~~Environments~~\n\n<font size=\"5\">Data structure</font>\n\nThe basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.\n\nThey have three common properties:\n\n-   Type, `typeof()` (\\~ class/mode)\n-   Length, `length()` (number of elements)\n-   Attributes, `attributes()` (metadata)\n\nThey differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.\n\n```{r, echo=F}\n\nd2 <- data.frame(\n \tc(\"Atomic vector\", \"List\"),\n\tc(\"Matrix\", \"Data frame\"),\nc(\"Array\", \"\"))\n\n\nd2 <- t(d2)\n\ncolnames(d2) <-c(\"Homogeneous\",\t\"Heterogeneous\")\n\nrownames(d2) <-c(\"1d\",\t\"2d\", \"nd\")\n\nd2 <- as.data.frame(d2)\n\nx <- d2\nx\n```\n\n \n\nR has no 0-dimensional elements (scalars). Individual numbers or strings are actually vectors of length one.\n\n<font size=\"5\">Atomic vectors</font>\n\nTypes of atomic vectors:\n\n-   Logical [(boolean)](https://en.wikipedia.org/wiki/Boolean)\n-   Integer\n-   Numeric (double)\n-   Character\n\nVectors are built using `c()`:\n\n```{r,collapse=TRUE}\n\nx <- 1\nx1 <- c(1)\n\nall.equal(x, x1)\n\nclass(x)\n\ny <- \"something\"\n\nclass(y)\n\nw <- 1L\n\nclass(w)\n \nz <- TRUE\n\nclass(z)\n\nq <- factor(1)\n\nclass(q)\n\n```\n\n \n\nVectors can only contain entries of the same type. Different types will be coerced to the most flexible type:\n\n```{r, collapse=TRUE}\n\nv <- c(10, 11, 12, 13)\n\nclass(v)\n\nis.integer(v)\n\ny <- c(\"Amazona\", \"Ara\", \"Eupsittula\", \"Myiopsitta\")\n\nclass(y)\n\nis.integer(y)\n\nx <- c(1,2,3, \"Myiopsitta\")\n\nx\n\nclass(x)\n\n```\n\n \n\nMissing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used inside `c()`:\n\n```{r, collapse=TRUE}\n\nv <- c(10, 11, 12, 13, NA)\n\nclass(v)\n\nv <- c(letters[1:3], NA)\n\nclass(v)\n\n```\n\n \n\n<font size=\"5\">Lists</font>\n\nCan contain objects of different classes and sizes. Lists are built using list():\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl\n\nclass(l)\n\nstr(l)\n\n```\n\n... and dimensions:\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n          size = c(1, 2, 3, 4, 5, 6), \n          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE), \n          l)\n\nstr(l)\n\nl2 <- list(l, l)\n\nstr(l2)\n\n```\n\n \n\n<font size=\"5\">Attributes</font>\n\nObjects can have attributes. Attributes allow to store metadata about the object. Attributes are kind of named lists. Attributes can be accessed individually with `attr()` or all at once (as a list) with `attributes()`:\n\n```{r}\ny <- 1:10\n\nmean(y)\n\nattr(y, \"my_attribute\") <- \"This is an attribute\"\n\n\nattr(y, \"my_attribute\")\n\n\nstr(y)\n```\n\n \n\nMost attributes are lost when modifying a vector:\n\n```{r}\n\nattributes(y[1])\n\n```\n\n \n\nThe only attributes not lost are the three most important:\n\n-   Names, a character vector giving each element a name, described in names\n-   Dimensions\n-   Class\n\n------------------------------------------------------------------------\n\n```{r}\nw <- structure(c(a =1, b = 2), my_attribute = \"This is not an apple\")\n\nattributes(w)\n\nattributes(w[1])\n\nclass(w[1])\n\n```\n\n \n\n<font size=\"5\">Factors</font>\n\nAttributes are used to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data.\n\nFactors are built on top of integer vectors using two attributes:\n\n-   class \"factor\": makes them behave differently from regular integer vectors\n-   levels: defines the set of allowed values\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\nlevels(x)\n\n\nstr(x)\n\n```\n\n \n\nFactors look like character vectors but they are actually integers:\n\n```{r}\n\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\n\nc(x)\n```\n\n \n\n<font size=\"5\">Matrices</font>\n\nAll entries are of the same type:\n\n```{r}\nm <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\ndim(m)\n\nm\n\nclass(m)\n\n\nm <- matrix(c(1, 2, 3, 11, 12,\"13\"), nrow = 2)\nm\n\n\n```\n\n \n\n<font size=\"5\">Data frames</font>\n\nSpecial case of lists. Can contain entries of different types:\n\n```{r}\n\nm <- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\ndim(m)\n\nm\n\nclass(m)\n\nis.data.frame(m)\n\nis.list(m)\n\nstr(m)\n\n```\n\n \n\nBut vectors should have the same length:\n\n```{r, error = TRUE}\n\nm <- data.frame(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), \n                size = c(1, 2, 3, 4, 5, 6), \n                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\n```\n\n \n\n------------------------------------------------------------------------\n\n## Data subsetting\n\n<font size=\"5\">Indexing</font>\n\nElements within objects can be called by indexing. To subset a vector simply call the object position using square brackets:\n\n```{r}\n\nx <- c(1, 3, 4, 10, 15, 20, 50, 1, 6)\n\nx[1]\n\nx[2]\n\nx[2:3]\n\nx[c(1,3)]\n```\n\n \n\nElements can be removed in the same way:\n\n```{r}\n\n\nx[-1]\n\nx[-c(1,3)]\n\n```\n\n \n\nMatrices and data frames required 2 indices `[row, column]`:\n\n```{r}\n\nm <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)\n\nm[1, ]\n\nm[, 1]\n\nm[1, 1]\n\nm[-1, ]\n\nm[, -1]\n\nm[-1, -1]\n\n\ndf <- data.frame(family = c(\"Psittacidae\", \"Trochilidae\", \n                            \"Psittacidae\"), \n  genus = c(\"Amazona\", \"Phaethornis\", \"Ara\"), \n\tspecies = c(\"aestiva\", \"philippii\", \"ararauna\"))\n\ndf\n\ndf[1, ]\n\ndf[, 1]\n\ndf[1, 1]\n\ndf[-1, ]\n\ndf[, -1]\n\ndf[-1, -1]\n\ndf[,\"family\"]\n\ndf[,c(\"family\", \"genus\")]\n\n```\n\n \n\nLists require 1 index within double square brackets `[[index]]`:\n\n```{r}\n\nl <- list(ID = c(\"a\", \"b\", \"c\", \"d\", \"e\"), size = c(1, 2, 3, 4, 5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))\n\nl[[1]]\n\nl[[3]]\n\n```\n\n \n\nElements within lists can also be subset in the same string of code:\n\n```{r}\n\nl[[1]][1:2]\n\nl[[3]][2]\n\n```\n\n \n\n<font size=\"5\">Exploring objects</font>\n\n```{r, eval = TRUE}\n\nstr(df)\n\nnames(df)\n\ndim(df)\n\nnrow(df)\n\nncol(df)\n\nhead(df)\n\ntail(df)\n\ntable(df$genus)\n\ntypeof(df)\n\n```\n\n```{r, eval = F}\nView(df)\n\n```\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Using the example data `iris` to create a data subset with only the observations of the species 'setosa'\n\n-   Now create a data subset containing the observations of both 'setosa' and 'versicolor'\n\n-   Also with `iris` create a data subset with the observations for which `iris$Sepal.length` is higher than 6\n\n-   How many observations have a sepal length higher than 6?\n:::\n\n \n\n------------------------------------------------------------------------\n\n \n\n## Functions\n\nAll functions are created by the function `function()` and follow the same structure:\n\n<img src=\"images/function.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund 2014</i></font>  \n\nR comes with many functions that you can use to do sophisticated tasks:\n\n```{r}\n# built in functions\nbi <- builtins()\n\nlength(bi)\n\nsample(bi, 10)\n\n```\n\n \n\nOperators are functions:\n\n```{r}\n\n1 + 1\n\n\n'+'(1, 1)\n\n2 * 3\n\n\n'*'(2, 3)\n\n\n```\n\n \n\n<font size=\"5\">Most commonly used R operators</font>\n\nArithmetic operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"+\" , \"addition\"),\nc(\"-\", \t\"subtraction\"),\nc(\"*\" ,\t\"multiplication\"),\nc(\"/\",\t\"division\"),\nc(\"^ or **\",\t\"exponent\"),\nc(\"x %% y\",\t\"modulus (x mod y)\"),\nc(\"x %/% y\",\t\"integer division\"))\n\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator      \", \"Description   \")\n\nd\n\n```\n\n \n\n```{r}\n\n1 - 2\n\n1 + 2\n\n2 ^ 2\n\n\n```\n\n \n\nLogical operators:\n\n```{r, echo=F}\nd <- data.frame(\nc(\"<\", \"less than\"),\nc(\"<=\", \"less than or equal to\"),\nc(\">\", \"greater than\"),\nc(\">=\",\t\"greater than or equal to\"),\nc(\"==\", \"exactly equal to\"),\nc(\"!=\",\t\"not equal to\"),\nc(\"!x\",\t\"Not x\"),\nc(\"x | y\", \"\tx OR y\"),\nc(\"x & y\", \t\"x AND y\"),\nc(\"x %in% y\",\t\"match\"))\n\nd <- t(d)\n\ncolnames(d) <- c(\"Operator   \", \"Description   \")\n\nd\n\n```\n\n \n\n```{r}\n\n1 < 2 \n\n1 > 2 \n\n1 <= 2 \n\n1 == 2\n\n1 != 2\n\n1 > 2 \n\n5 %in% 1:6\n\n5 %in% 1:4\n```\n\n \n\nMost functions are vectorized:\n\n```{r, eval=F}\n\n1:6 * 1:6\n\n```\n\n<img src=\"images/vectorize.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:6\n```\n\n```{r}\n\n1:6 - 1:6\n```\n\nR recycles vectors of unequal length:\n\n```{r, eval=F}\n\n1:6 * 1:5\n\n```\n\n<img src=\"images/recycle.png\" alt=\"R\" height=\"350\" width=\"900\"/>\n\n<font size=\"2\">\\* Modified from <i>Grolemund & Wickham 2017</i></font>\n\n \n\n```{r, echo=F}\n\n1:6 * 1:5\n\n```\n\n```{r}\n\n1:6 + 1:5\n\n```\n\n \n\n------------------------------------------------------------------------\n\n## Style matters\n\n<font size=\"2\"><a href=\"https://google.github.io/styleguide/Rguide.xml\">Based on google's R Style Guide</a></font>\n\n<font size=\"5\">File names</font>\n\nFile names should end in .R and, of course, be meaningful:\n\n-   GOOD: predict_ad_revenue.R\n-   BAD: foo.R\n\n<font size=\"5\">Object names</font>\n\nVariables and functions:\n\n-   Lowercase\n-   Use an underscore (\\_) (HW style)\n-   Generally, nouns for variables and verbs for functions\n-   Strive for names that are concise and meaningful (not always easy)\n-   Avoid using names of existing functions of variables\n\n```{r, eval=F}\n\n  - GOOD: day_one: day_1, mean.day(),\n  \n  - BAD: dayOne, day1, firstDay_of.month, mean <- function(x) sum(x), c <- 10\n```\n\n \n\n<font size=\"5\">Syntax</font>\n\nSpacing:\n\n-   Use spaces around operators and for argument within a function\n-   Always put a space after a comma, and never before (just like in regular English)\n-   Place a space before left parenthesis, except in a function call\n\n```{r, eval=F}\n\n  - GOOD: \n          a <- rnorm(n = 10, sd = 10, mean = 1)\n          tab.prior <- table(df[df$days.from.opt < 0, \"campaign.id\"])\n          total <- sum(x[, 1])\n          total <- sum(x[1, ])\n          if (debug)\n          mean(1:10)\n          \n  - BAD: \n         a<-rnorm(n=10,sd=10,mean=1)\n         tab.prior <- table(df[df$days.from.opt<0, \"campaign.id\"])  # Needs spaces around '<'\n         tab.prior <- table(df[df$days.from.opt < 0,\"campaign.id\"])  # Needs a space after the comma\n         tab.prior<- table(df[df$days.from.opt < 0, \"campaign.id\"])  # Needs a space before <-\n         tab.prior<-table(df[df$days.from.opt < 0, \"campaign.id\"])  # Needs spaces around <-\n         total <- sum(x[,1])  # Needs a space after the comma\n         total <- sum(x[ ,1])  # Needs a space after the comma, not before  \n         if(debug) # Needs a space before parenthesis\n         mean (1:10) # ) # Extra space before parenthesis\n\n```\n\n \n\nCurly braces:\n\n-   An opening curly brace should never go on its own line\n-   Closing curly brace should always go on its own line\n-   You may omit curly braces when a block consists of a single statement\n\n```{r eval=F}\n\n  - GOOD:\n              if (is.null(ylim)) {\n              ylim <- c(0, 0.06)\n            }\n                      \n            if (is.null(ylim))\n              ylim <- c(0, 0.06)\n          \n  - BAD:\n            \n         if (is.null(ylim)) ylim <- c(0, 0.06)\n                    \n         if (is.null(ylim)) {ylim <- c(0, 0.06)} \n\n         if (is.null(ylim)) {\n           ylim <- c(0, 0.06)\n           } \n```\n\n \n\nAssigments:\n\n-   Use \\<-, not =\n\n```{r, eval = F}\n\n  - GOOD:\n         x <- 5 \n          \n  - BAD:\n         x = 5\n```\n\n \n\nCommenting guidelines:\n\n-   Comment your code\n-   Entire commented lines should begin with \\# and one space\n-   Short comments can be placed after code preceded by two spaces, #, and then one space\n\n```{r, eval=F}\n\n# Create histogram of frequency of campaigns by pct budget spent.\nhist(df$pct.spent,\n     breaks = \"scott\",  # method for choosing number of buckets\n     main   = \"Histogram: fraction budget spent by campaignid\",\n     xlab   = \"Fraction of budget spent\",\n     ylab   = \"Frequency (count of campaignids)\")\n```\n\n \n\nGeneral Layout and Ordering (google style):\n\n-   Copyright statement comment (?)\n-   Author comment\n-   File description comment, including purpose of program, inputs, and outputs\n-   source() and library() statements\n-   Function definitions\n-   Executed statements, if applicable (e.g., print, plot)\n\n------------------------------------------------------------------------\n\n \n\n## R documentation\n\nMost R resources are extremely well documented. So the first source for help you should go to when writting R code is the R documention itself. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.\n\n<font size=\"5\">Package documentation</font>\n\n<img src=\"images/packagepage.png\" alt=\"R\" height=\"900\" width=\"800\" style=\"border:3px solid gray\"/>\n\n \n\n<font size=\"5\">Reference manuals</font>\n\nReference manuals are collections of the documentation for all functions in a package (only 1 per package):\n\n-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)\n\n-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)\n\n \n\n<font size=\"5\">Function documentation</font>\n\nAll functions (default or from loaded packages) must have a documentation that follows a standard format:\n\n```{r, eval=F}\n?mean\n\nhelp(\"mean\")\n\n```\n\n<img src=\"images/documentation.png\" alt=\"R\" height=\"700\" width=\"800\" style=\"border:3px solid gray\"/>  \n\nThis documentation can also be shown in Rstudio by pressing `F1` when the cursor is on the function name\n\n \n\nIf you don't recall the function name try `apropos()`:\n\n```{r}\napropos(\"mean\")\n\n```\n\n \n\n<font size=\"5\">Vignettes</font>\n\nVignettes are illustrative documents or study cases detailing the use of a package (optional, can be several per package).\n\nVignettes can be called directly from R:\n\n```{r}\nvgn <- browseVignettes() \n```\n\n```{r, eval = F}\nvignette()\n```\n\nThey should also be listed in the package CRAN page.\n\n \n\n<font size=\"5\">Demonstrations</font>\n\nPackages may also include extended code demonstrations ('demos'). To list demos in a package run `demo(\"package name\")`:\n\n```{r, eval=F}\ndemo(package=\"stats\")\n\n# call demo directly\ndemo(\"nlm\")\n\n```\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   What does the function `cut()` do?\n\n-   What is the `breaks` argument in `cut()` used for?\n\n-   Run the first 4 lines of code in the examples supplied in the `cut()` documentation\n\n-   How many vignettes does the package warbleR has?\n:::\n\n \n\n------------------------------------------------------------------------\n\n## References\n\n-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)\n-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\\\n-   Hands-On Programming with R (Grolemund, 2014)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"highlight-style":"pygments","css":["styles.css"],"output-file":"r_basics.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","toc-location":"left","toc-title":"Contents","code-copy":true,"date":"today","title":"R basics"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}