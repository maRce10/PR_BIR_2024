{"title":"<font size=\"7\"><b>Quality checks for recordings and annotations</b></font>","markdown":{"yaml":{"title":"<font size=\"7\"><b>Quality checks for recordings and annotations</b></font>"},"headingText":"**Objetive**","headingAttr":{"id":"","classes":["unnumbered","unlisted"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n \n\n::: {.alert .alert-info}\n\n-   Provide tools for double-checking the quality of the acoustic data and derived analyses along the acoustic analysis workflow\n:::\n\n \n\n```{r, echo = FALSE}\nlibrary(knitr)\n# options to customize chunk outputs\nknitr::opts_chunk$set(\n  class.source = \"numberLines lineAnchors\", # for code line numbers\n  tidy.opts = list(width.cutoff = 65), \n  tidy = TRUE,\n  message = FALSE,\n  warning = FALSE\n )\n\n```\n\n \n\nWhen working with sound files obtained from various sources it is common to have variation in recording formats and parameters or even find corrupt files. Similarly, when a large number of annotations are used, it is normal to find errors in some of them. These problems may prevent the use of acoustic analysis in **warbleR**. Luckily, the package also offers functions to facilitate the detection and correction of errors in sound files and annotations.\n\n## Convert .mp3 to .wav\n\nThe `mp32wav()` function allows you to convert files in '.mp3' format to '.wav' format. This function converts all the 'mp3' files in the working directory. Let's use the files in the './examples/mp3' folder as an example:\n\n```{r clean session, echo=F, warning=FALSE, message=FALSE}\n\n# rm(list = ls())\n\n# unload all non-based packages\nout <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = \"\"), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))\n\nknitr::opts_chunk$set(dpi = 60)\n\nlibrary(warbleR)\n\nlibrary(kableExtra)\n\nmp3.pth <- \"./examples/mp3/\"\n\nwarbleR_options(wav.path = \"./examples\", flim = c(1, 10), wl = 220, ovlp = 90, pb = FALSE)\n\n```\n\n```{r , eval = FALSE}\n\nwarbleR_options(wav.path = \"./examples\", ovlp = 90)\n\nlist.files(path = \"./examples/mp3\", pattern = \"mp3$\")\n\nmp32wav(path = \"./examples/mp3\",  dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\", pattern = \"mp3$|wav$\")\n\n```\n\n```{r, echo = FALSE}\n\nunlink(list.files(path = \"./examples/mp3\", pattern = \"\\\\.wav$\", ignore.case = TRUE, full.names = TRUE))\n  \nlist.files(path = \"./examples/mp3\",  pattern = \"mp3$\")\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\",  pattern = \"mp3$|wav$\")\n\n```\n\n \n\nWe can also modify the sampling rate and/or dynamic range with `mp32wav()`:\n\n```{r , eval = FALSE}\n\nmp32wav(path = \"./examples/mp3\", samp.rate = 48, bit.depth = 24, overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\")\n\n```\n\n \n\nWe can check the properties of the '.wav' sound files using the `info_sound_files()` function:\n\n```{r, eval = FALSE}\n\ninfo_sound_files(path = \"./examples/mp3\")\n\n```\n\n```{r, echo = FALSE, message=FALSE}\n\nwi <- info_sound_files(path = mp3.pth)\n\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\n## Homogenize recordings\n\nAlternatively, we can use the `fix_wavs()` function to homogenize the sampling rate, the dynamic interval and the number of channels. It is adviced that all sound files should have the same recording parameters before any acoustic analysis. In the example '.mp3' files, not all of them have been recorded with the same parameters. We can see this if we convert them back to '.wav' and see their properties:\n\n```{r, eval = F}\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\"\n\ninfo_sound_files(path = \"./examples/mp3\")\n\n```\n\n```{r, echo = F}\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nwi <- info_sound_files(path = \"./examples/mp3\")\n\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 3, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\nThe `fix_wavs()` function will convert all files to the same sampling rate and dynamic range:\n\n```{r ,eval = FALSE}\n\nfix_wavs(path = mp3.pth, samp.rate = 44.1, bit.depth = 24)\n\ninfo_sound_files(path = \"./examples/mp3/converted_sound_files\")\n\n```\n\n```{r, echo = FALSE, message=FALSE, warning=FALSE, eval = FALSE}\nfix_wavs(samp.rate = 44.1, bit.depth = 24, path = \"./examples/mp3\")\n\nwi <- info_sound_files(path = \"./examples/mp3/converted_sound_files/\")\n\n# unlink(list.files(path = \"./examples/mp3\", pattern = \"\\\\.wav$\", ignore.case = TRUE))\n```\n\n```{r, echo = FALSE, message=FALSE, warning=FALSE}\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, c(3, 5), background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n\n```\n\nAnother useful function to check file properties is `wav_dur()`. This function returns the duration in seconds of each '.wav' file.\n\n \n\n## Check recordings\n\n`check_sound_files()` should be the first function that should be used before running any **warbleR** analysis. The function simply checks if the sound files in '.wav' format in the working directory can be read in R. For example, the following code checks all the files in the 'examples' folder, which should detect the 'corrupted_file.wav':\n\n```{r, eval = TRUE, message=TRUE, warning=TRUE}\n\ncheck_sound_files()\n\n```\n\n```{r, echo = FALSE}\n\n#cortar \na <- file.copy(file.path(.Options$warbleR$path, \"corrupted_file.wav\"), file.path(tempdir(), \"corrupted_file.wav\"))\n\nunlink(file.path(.Options$warbleR$path, \"corrupted_file.wav\"))\n\n#check\ncheck_sound_files()\n\n# cortar\na <- file.copy(file.path(tempdir(), \"corrupted_file.wav\"), file.path(.Options$warbleR$path, \"corrupted_file.wav\"))\n\n```\n\n \n\n## Spectrograph settings\n\nThe parameters that determine the appearance of spectrograms (and power spectra and periodgrams) also have an effect on the measurements taken on them. Therefore it is necessary to use the same parameters to analyze all the signals in a project (except with some exceptions) so that the measurements are comparable. The visualization of spectrograms generated with different spectrographic parameters is a useful way of defining the combination of parameters with which the structure of the signals is distinguished in more detail. The function `tweak_spectro()` aims to simplify the selection of parameters through the display of spectrograms. The function plots, for a single selection, a mosaic of spectrograms with different display parameters. For numerical arguments, the upper and lower limits of a range can be provided. The following parameters may have variable values:\n\n-   **wl**: window length (numerical range)\n-   **ovlp**: overlap (numerical range)\n-   **collev.min**: minimum amplitude value for color levels (numerical range)\n-   **wn**: window function name (character)\n-   **pal**: palette (character)\n\nThe following code generates an image with spectrograms that vary in window size and window function (the rest of the parameters are passed to the `catalog ()` function internally to create the mosaic):\n\n```{r, eval = FALSE}\n\ntweak_spectro(X = lbh_selec_table,  wl = c(100, 1000),  wn = c(\"hanning\", \"hamming\", \"rectangle\"), \n           length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20,\n           rm.axes = TRUE, cex = 1, box = F)\n\n```\n\n<img src=\"images/spec_param1.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\nNote that the `length.out` argument defines the number of values to interpolate within the numerical ranges. `wl = 220` seems to produce clearer spectrograms.\n\nWe can add a color palette to differentiate the levels of one of the parameters, for example 'wn':\n\n```{r, eval = FALSE}\n\n#install.packages(\"RColorBrewer\")\n\nlibrary(RColorBrewer)\n\n# crear paleta\ncmc <- function(n) if(n > 5) rep(adjustcolor(brewer.pal(5, \"Spectral\"), alpha.f = 0.6), ceiling(n/4))[1:n] else adjustcolor(brewer.pal(n, \"Spectral\"), alpha.f = 0.6)\n\ntweak_spectro(X = lbh_selec_table,  wl = c(100, 1000),  wn = c(\"hanning\", \"hamming\", \"rectangle\"), \n           length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20, \n           rm.axes = TRUE, cex = 1, box = F,  group.tag = \"wn\",  \n           tag.pal = list(cmc))\n\n```\n\n<img src=\"images/spec_param3.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\nWe can also use it to choose the color palette and the minimum amplitude for plotting ('collev.min'):\n\n```{r, eval = FALSE}\n\ntweak_spectro(X = lbh_selec_table,  wl = 220,  collev.min = c(-20, -100), pal = c(\"reverse.gray.colors.2\", \"reverse.topo.colors\",  \"reverse.terrain.colors\"), length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20, rm.axes = TRUE, cex = 1, box = F,  group.tag = \"pal\",  tag.pal = list(cmc))\n\n```\n\n<img src=\"images/spec_param2.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\n## Double-check selections\n\nThe main function to double-check selection tables is `check_sels()`. This function checks a large number of possible errors in the selection information:\n\n-   'X' is an object of the class 'data.frame' or 'selection_table' (see selection_table) and contains the columns required to be used in any warbleR function ('sound.files', 'selec', 'start' , 'end', if it does not return an error)\n-   'sound.files' in 'X' corresponds to the .wav files in the working directory or in the provided 'path' (if no file is found it returns an error, if some files are not found it returns error information in the output data frame)\n-   the time limit parameters ('start', 'end') and frequency ('bottom.freq', 'top.freq', if provided) are numeric and do not contain NA (if they do not return an error)\n-   There are no duplicate selection tags ('selec') within a sound file (if it does not return an error)\n-   sound files can be read (error information in the output data frame)\n-   The start and end time of the selections is within the duration of the sound files (error information in the output data frame)\n-   Sound files can be read (error information in the output data frame)\n-   The header (header) of the sound files is not damaged (only if the header = TRUE, error information in the selection table with results)\n-   'top.freq' is less than half of the sampling frequency (nyquist frequency, error information in the data table with results)\n-   Negative values are not found in the time or frequency limit parameters (error information in the data table with results)\n-   'start' higher than 'end' or 'bottom.freq' higher than 'top.freq' (error information in the output data frame)\n-   The value of 'channel' is not greater than the number of channels in the sound files (error information in the output data frame)\n\n```{r}\n\ncs <- check_sels(lbh_selec_table)\n\n```\n\n \n\nThe function returns a data frame that includes the information in 'X' plus additional columns about the format of the sound files, as well as the result of the checks (column 'check.res'):\n\n```{r, eval = FALSE}\n\ncs\n\n```\n\n```{r, echo = FALSE}\n\nkbl <- kable(cs, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 10, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nscroll_box(kbl, width = \"808px\",\nbox_css = \"border: 1px solid #ddd; padding: 5px; \", extra_css = NULL)\n\n\n```\n\n \n\nLet's modified a selection table to see how the function works:\n\n```{r, eval = FALSE}\n\n# copiar las primeras 6 filas\nst2 <- lbh_selec_table[1:6, ]\n\n# hacer caracter \nst2$sound.files <- as.character(st2$sound.files)\n\n# cambiar nombre de archivo de sonido en sel 1\nst2$sound.files[1] <- \"aaa.wav\"\n\n# modificar fin en sel 3\nst2$end[3] <- 100\n\n# hacer top.freq igual q bottom freq en sel 3\nst2$top.freq[3] <- st2$bottom.freq[3]\n\n# modificar top freq en sel 5\nst2$top.freq[5] <- 200\n\n# modificar channes en sel 6\nst2$channel[6] <- 3\n\n#revisar\ncs <- check_sels(st2)\n\ncs[, c(1:7, 10)]\n```\n\n```{r, echo = FALSE}\n\n# copiar las primeras 6 filas\nst2 <- lbh_selec_table[1:6, ]\n\n# hacer caracter \nst2$sound.files <- as.character(st2$sound.files)\n\n# cambiar nombre de archivo de sonido en sel 1\nst2$sound.files[1] <- \"aaa.wav\"\n\n# modificar fin en sel 3\nst2$end[3] <- 100\n\n# hacer top.freq igual q bottom freq en sel 3\nst2$top.freq[3] <- st2$bottom.freq[3]\n\n# modificar top freq en sel 5\nst2$top.freq[5] <- 200\n\n# modificar channes en sel 6\nst2$channel[6] <- 3\n\n#revisar\ncs <- check_sels(st2)\n\n\n```\n\n```{r, echo = FALSE}\n\nkbl <- kable(cs[, c(1:7, 10)], align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 8, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\n`check_sels()` is used internally when creating selection tables and extended selection tables.\n\n \n\n### Visual inspection of spectrograms\n\nOnce the information in the selections has been verified, the next step is to ensure that the selections contain accurate information about the location of the signals of interest. This can be done by creating spectrograms of all selections. For this we have several options. The first is `spectrograms()` (previously called `specreator()`) which generates (by default) a spectrogram for each selection. We can run it on the sample data like this:\n\n```{r, eval = FALSE}\n\n# using default parameters tweak_spectro()\nwarbleR_options(wav.path = \"./examples\", wl = 220, wn = \"hanning\", ovlp = 90, pal = reverse.topo.colors)\n\nspectrograms(lbh_selec_table, collevels = seq(-100, 0, 5))\n\n```\n\n```{r, eval = FALSE, echo = FALSE}\n\n# using default parameters tweak_spectro()\nwarbleR_options(wav.path = \"~/Dropbox/Workshops/Bioacoustics/Taller Bioacoustics Arequipa 2019/Taller 2/ejemplos\", wl = 220, wn = \"hanning\", ovlp = 90, pal = reverse.topo.colors)\n\nspectrograms(lbh_selec_table, collevels = seq(-100, 0, 5))\n\n```\n\n \n\nThe images it produces are saved in the working directory and look like this:\n\n<img src=\"images/spectrograms2.gif\" alt=\"viewSpec\" width=\"50%\"/>\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Have the label shown on the selection display the data in the 'sel.comment' column of the sample selection box using the `sel.labels` argument\n:::\n\n \n\n### Full spectrograms\n\nWe can create spectrograms for the whole sound files using `full_spectrograms()`. If the `X` argument is not given, the function will create the spectrograms for all the files in the working directory. Otherwise, the function generates spectrograms for sound files in `X` and highlights selections with transparent rectangles similar to those of`spectrograms()`. In this example we download a recording from a striped-throated hermit (*Phaethornis striigularis*) from Xeno-Canto:\n\n```{r, eval = FALSE}\n\n# load package with color palettes\nlibrary(viridis)\n\n# create directory\ndir.create(\"./examples/hermit\")\n\n# download sound file\nphae.stri <- query_xc(qword = \"nr:154074\", download = TRUE, path = \"./examples/hermit\")\n\n# Convert mp3 to wav format\nmp32wav(path = \"./examples/hermit/\", pb = FALSE)\n\n# plot full spec\nfull_spectrograms(sxrow = 1, rows = 10, pal = magma,  wl = 200, flim = c(3, 10),\n          collevels = seq(-140, 0, 5), path = \"./examples/hermit/\")\n\n```\n\n<img src=\"images/fullspec_hermit.gif\" alt=\"hermit\" width=\"80%\"/>\n\n \n\n## Catalogs\n\nCatalogs allow you to inspect selections of many recordings in the same image and group them by categories. This makes it easier to verify the consistency of the categories. Many of the arguments are shared with `tweak_spectro()` (`catalog()` is used internally in `tweak_spectro()`). We can generate a catalog with color tags to identify selections from the same sound file as follows:\n\n```{r, eval = FALSE}\n\n# read bat inquiry data\ninq <- readRDS(file = \"ext_sel_tab_inquiry.RDS\")\n\ncatalog(X = inq[1:100, ], flim = c(10, 50), nrow = 10, ncol = 10, \n        same.time.scale = T, mar = 0.01, gr = FALSE, img.suffix = \"inquiry\",\n        labels = c(\"sound.files\", \"selec\"), legend = 0, rm.axes = TRUE, \n        box = F,  group.tag = \"sound.files\",  tag.pal = list(magma), \n        width = 20, height = 20, pal = viridis, collevels = seq(-100, 0, 5))\n\n```\n\n<img src=\"images/Catalog_p1-inquiry.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Using the 'lbh_selec_table' data, create a catalog with selections color-tagged by song type\n:::\n\n \n\n## Tailoring selections\n\nThe position of the selections in the sound file (i.e. its 'coordinates' of time and frequency) can be modified interactively from R using the `sel_tailor()` function. This function produces a graphic window showing spectrograms and a series of 'buttons' that allow you to modify the view and move forward in the selection table:\n\n```{r, eval=F}\n\ntailor_sels(X = lbh_selec_table[1:4, ], auto.next = TRUE)\n\n```\n\n<img src=\"images/seltailor.autonext.gif\" alt=\"seltailor autonext\" width=\"100%\"/>\n\n \n\nThe function returns the corrected data as a data frame in R and also saves a '.csv' file in the directory where the sound files are located.\n\n`sel_tailor()` can also be used to modify frequency contours such as those produced by the `dfDTW()` or `ffDTW()` function:\n\n```{r, eval=FALSE}\n\ncntours <- freq_ts(X = lbh_selec_table[1:5, ])\n\ntail.cntours <-tailor_sels(X = lbh_selec_table[1:5, ], ts.df = cntours, \n                auto.contour = TRUE)\n```\n\n<img src=\"images/seltailor.contour.gif\" alt=\"seltailor autonext\" width=\"100%\"/>\n\n \n\n------------------------------------------------------------------------\n\n## References\n\n1.  Araya-Salas M, Smith-Vidaurre G (2017) warbleR: An R package to streamline analysis of animal acoustic signals. Methods Ecol Evol 8:184--191.\n\n \n\n------------------------------------------------------------------------\n\n<font size=\"4\">Session information</font>\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n","srcMarkdownNoYaml":"\n\n \n\n::: {.alert .alert-info}\n## **Objetive** {.unnumbered .unlisted}\n\n-   Provide tools for double-checking the quality of the acoustic data and derived analyses along the acoustic analysis workflow\n:::\n\n \n\n```{r, echo = FALSE}\nlibrary(knitr)\n# options to customize chunk outputs\nknitr::opts_chunk$set(\n  class.source = \"numberLines lineAnchors\", # for code line numbers\n  tidy.opts = list(width.cutoff = 65), \n  tidy = TRUE,\n  message = FALSE,\n  warning = FALSE\n )\n\n```\n\n \n\nWhen working with sound files obtained from various sources it is common to have variation in recording formats and parameters or even find corrupt files. Similarly, when a large number of annotations are used, it is normal to find errors in some of them. These problems may prevent the use of acoustic analysis in **warbleR**. Luckily, the package also offers functions to facilitate the detection and correction of errors in sound files and annotations.\n\n## Convert .mp3 to .wav\n\nThe `mp32wav()` function allows you to convert files in '.mp3' format to '.wav' format. This function converts all the 'mp3' files in the working directory. Let's use the files in the './examples/mp3' folder as an example:\n\n```{r clean session, echo=F, warning=FALSE, message=FALSE}\n\n# rm(list = ls())\n\n# unload all non-based packages\nout <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = \"\"), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))\n\nknitr::opts_chunk$set(dpi = 60)\n\nlibrary(warbleR)\n\nlibrary(kableExtra)\n\nmp3.pth <- \"./examples/mp3/\"\n\nwarbleR_options(wav.path = \"./examples\", flim = c(1, 10), wl = 220, ovlp = 90, pb = FALSE)\n\n```\n\n```{r , eval = FALSE}\n\nwarbleR_options(wav.path = \"./examples\", ovlp = 90)\n\nlist.files(path = \"./examples/mp3\", pattern = \"mp3$\")\n\nmp32wav(path = \"./examples/mp3\",  dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\", pattern = \"mp3$|wav$\")\n\n```\n\n```{r, echo = FALSE}\n\nunlink(list.files(path = \"./examples/mp3\", pattern = \"\\\\.wav$\", ignore.case = TRUE, full.names = TRUE))\n  \nlist.files(path = \"./examples/mp3\",  pattern = \"mp3$\")\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\",  pattern = \"mp3$|wav$\")\n\n```\n\n \n\nWe can also modify the sampling rate and/or dynamic range with `mp32wav()`:\n\n```{r , eval = FALSE}\n\nmp32wav(path = \"./examples/mp3\", samp.rate = 48, bit.depth = 24, overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nlist.files(path = \"./examples/mp3\")\n\n```\n\n \n\nWe can check the properties of the '.wav' sound files using the `info_sound_files()` function:\n\n```{r, eval = FALSE}\n\ninfo_sound_files(path = \"./examples/mp3\")\n\n```\n\n```{r, echo = FALSE, message=FALSE}\n\nwi <- info_sound_files(path = mp3.pth)\n\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\n## Homogenize recordings\n\nAlternatively, we can use the `fix_wavs()` function to homogenize the sampling rate, the dynamic interval and the number of channels. It is adviced that all sound files should have the same recording parameters before any acoustic analysis. In the example '.mp3' files, not all of them have been recorded with the same parameters. We can see this if we convert them back to '.wav' and see their properties:\n\n```{r, eval = F}\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\"\n\ninfo_sound_files(path = \"./examples/mp3\")\n\n```\n\n```{r, echo = F}\n\nmp32wav(path = \"./examples/mp3\", overwrite = TRUE, dest.path = \"./examples/mp3\")\n\nwi <- info_sound_files(path = \"./examples/mp3\")\n\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 3, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\nThe `fix_wavs()` function will convert all files to the same sampling rate and dynamic range:\n\n```{r ,eval = FALSE}\n\nfix_wavs(path = mp3.pth, samp.rate = 44.1, bit.depth = 24)\n\ninfo_sound_files(path = \"./examples/mp3/converted_sound_files\")\n\n```\n\n```{r, echo = FALSE, message=FALSE, warning=FALSE, eval = FALSE}\nfix_wavs(samp.rate = 44.1, bit.depth = 24, path = \"./examples/mp3\")\n\nwi <- info_sound_files(path = \"./examples/mp3/converted_sound_files/\")\n\n# unlink(list.files(path = \"./examples/mp3\", pattern = \"\\\\.wav$\", ignore.case = TRUE))\n```\n\n```{r, echo = FALSE, message=FALSE, warning=FALSE}\nkbl <- kable(wi, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, c(3, 5), background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n\n```\n\nAnother useful function to check file properties is `wav_dur()`. This function returns the duration in seconds of each '.wav' file.\n\n \n\n## Check recordings\n\n`check_sound_files()` should be the first function that should be used before running any **warbleR** analysis. The function simply checks if the sound files in '.wav' format in the working directory can be read in R. For example, the following code checks all the files in the 'examples' folder, which should detect the 'corrupted_file.wav':\n\n```{r, eval = TRUE, message=TRUE, warning=TRUE}\n\ncheck_sound_files()\n\n```\n\n```{r, echo = FALSE}\n\n#cortar \na <- file.copy(file.path(.Options$warbleR$path, \"corrupted_file.wav\"), file.path(tempdir(), \"corrupted_file.wav\"))\n\nunlink(file.path(.Options$warbleR$path, \"corrupted_file.wav\"))\n\n#check\ncheck_sound_files()\n\n# cortar\na <- file.copy(file.path(tempdir(), \"corrupted_file.wav\"), file.path(.Options$warbleR$path, \"corrupted_file.wav\"))\n\n```\n\n \n\n## Spectrograph settings\n\nThe parameters that determine the appearance of spectrograms (and power spectra and periodgrams) also have an effect on the measurements taken on them. Therefore it is necessary to use the same parameters to analyze all the signals in a project (except with some exceptions) so that the measurements are comparable. The visualization of spectrograms generated with different spectrographic parameters is a useful way of defining the combination of parameters with which the structure of the signals is distinguished in more detail. The function `tweak_spectro()` aims to simplify the selection of parameters through the display of spectrograms. The function plots, for a single selection, a mosaic of spectrograms with different display parameters. For numerical arguments, the upper and lower limits of a range can be provided. The following parameters may have variable values:\n\n-   **wl**: window length (numerical range)\n-   **ovlp**: overlap (numerical range)\n-   **collev.min**: minimum amplitude value for color levels (numerical range)\n-   **wn**: window function name (character)\n-   **pal**: palette (character)\n\nThe following code generates an image with spectrograms that vary in window size and window function (the rest of the parameters are passed to the `catalog ()` function internally to create the mosaic):\n\n```{r, eval = FALSE}\n\ntweak_spectro(X = lbh_selec_table,  wl = c(100, 1000),  wn = c(\"hanning\", \"hamming\", \"rectangle\"), \n           length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20,\n           rm.axes = TRUE, cex = 1, box = F)\n\n```\n\n<img src=\"images/spec_param1.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\nNote that the `length.out` argument defines the number of values to interpolate within the numerical ranges. `wl = 220` seems to produce clearer spectrograms.\n\nWe can add a color palette to differentiate the levels of one of the parameters, for example 'wn':\n\n```{r, eval = FALSE}\n\n#install.packages(\"RColorBrewer\")\n\nlibrary(RColorBrewer)\n\n# crear paleta\ncmc <- function(n) if(n > 5) rep(adjustcolor(brewer.pal(5, \"Spectral\"), alpha.f = 0.6), ceiling(n/4))[1:n] else adjustcolor(brewer.pal(n, \"Spectral\"), alpha.f = 0.6)\n\ntweak_spectro(X = lbh_selec_table,  wl = c(100, 1000),  wn = c(\"hanning\", \"hamming\", \"rectangle\"), \n           length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20, \n           rm.axes = TRUE, cex = 1, box = F,  group.tag = \"wn\",  \n           tag.pal = list(cmc))\n\n```\n\n<img src=\"images/spec_param3.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\nWe can also use it to choose the color palette and the minimum amplitude for plotting ('collev.min'):\n\n```{r, eval = FALSE}\n\ntweak_spectro(X = lbh_selec_table,  wl = 220,  collev.min = c(-20, -100), pal = c(\"reverse.gray.colors.2\", \"reverse.topo.colors\",  \"reverse.terrain.colors\"), length.out = 16, nrow = 8, ncol = 6, width = 15, height = 20, rm.axes = TRUE, cex = 1, box = F,  group.tag = \"pal\",  tag.pal = list(cmc))\n\n```\n\n<img src=\"images/spec_param2.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\n## Double-check selections\n\nThe main function to double-check selection tables is `check_sels()`. This function checks a large number of possible errors in the selection information:\n\n-   'X' is an object of the class 'data.frame' or 'selection_table' (see selection_table) and contains the columns required to be used in any warbleR function ('sound.files', 'selec', 'start' , 'end', if it does not return an error)\n-   'sound.files' in 'X' corresponds to the .wav files in the working directory or in the provided 'path' (if no file is found it returns an error, if some files are not found it returns error information in the output data frame)\n-   the time limit parameters ('start', 'end') and frequency ('bottom.freq', 'top.freq', if provided) are numeric and do not contain NA (if they do not return an error)\n-   There are no duplicate selection tags ('selec') within a sound file (if it does not return an error)\n-   sound files can be read (error information in the output data frame)\n-   The start and end time of the selections is within the duration of the sound files (error information in the output data frame)\n-   Sound files can be read (error information in the output data frame)\n-   The header (header) of the sound files is not damaged (only if the header = TRUE, error information in the selection table with results)\n-   'top.freq' is less than half of the sampling frequency (nyquist frequency, error information in the data table with results)\n-   Negative values are not found in the time or frequency limit parameters (error information in the data table with results)\n-   'start' higher than 'end' or 'bottom.freq' higher than 'top.freq' (error information in the output data frame)\n-   The value of 'channel' is not greater than the number of channels in the sound files (error information in the output data frame)\n\n```{r}\n\ncs <- check_sels(lbh_selec_table)\n\n```\n\n \n\nThe function returns a data frame that includes the information in 'X' plus additional columns about the format of the sound files, as well as the result of the checks (column 'check.res'):\n\n```{r, eval = FALSE}\n\ncs\n\n```\n\n```{r, echo = FALSE}\n\nkbl <- kable(cs, align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 10, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nscroll_box(kbl, width = \"808px\",\nbox_css = \"border: 1px solid #ddd; padding: 5px; \", extra_css = NULL)\n\n\n```\n\n \n\nLet's modified a selection table to see how the function works:\n\n```{r, eval = FALSE}\n\n# copiar las primeras 6 filas\nst2 <- lbh_selec_table[1:6, ]\n\n# hacer caracter \nst2$sound.files <- as.character(st2$sound.files)\n\n# cambiar nombre de archivo de sonido en sel 1\nst2$sound.files[1] <- \"aaa.wav\"\n\n# modificar fin en sel 3\nst2$end[3] <- 100\n\n# hacer top.freq igual q bottom freq en sel 3\nst2$top.freq[3] <- st2$bottom.freq[3]\n\n# modificar top freq en sel 5\nst2$top.freq[5] <- 200\n\n# modificar channes en sel 6\nst2$channel[6] <- 3\n\n#revisar\ncs <- check_sels(st2)\n\ncs[, c(1:7, 10)]\n```\n\n```{r, echo = FALSE}\n\n# copiar las primeras 6 filas\nst2 <- lbh_selec_table[1:6, ]\n\n# hacer caracter \nst2$sound.files <- as.character(st2$sound.files)\n\n# cambiar nombre de archivo de sonido en sel 1\nst2$sound.files[1] <- \"aaa.wav\"\n\n# modificar fin en sel 3\nst2$end[3] <- 100\n\n# hacer top.freq igual q bottom freq en sel 3\nst2$top.freq[3] <- st2$bottom.freq[3]\n\n# modificar top freq en sel 5\nst2$top.freq[5] <- 200\n\n# modificar channes en sel 6\nst2$channel[6] <- 3\n\n#revisar\ncs <- check_sels(st2)\n\n\n```\n\n```{r, echo = FALSE}\n\nkbl <- kable(cs[, c(1:7, 10)], align = \"c\", row.names = F,  format = \"html\", escape = F)\n\nkbl <-  column_spec(kbl, 8, background = \"#ccebff\")\n\nkbl <-  kable_styling(kbl, bootstrap_options = \"striped\", font_size = 14)\n\nkbl\n\n```\n\n \n\n`check_sels()` is used internally when creating selection tables and extended selection tables.\n\n \n\n### Visual inspection of spectrograms\n\nOnce the information in the selections has been verified, the next step is to ensure that the selections contain accurate information about the location of the signals of interest. This can be done by creating spectrograms of all selections. For this we have several options. The first is `spectrograms()` (previously called `specreator()`) which generates (by default) a spectrogram for each selection. We can run it on the sample data like this:\n\n```{r, eval = FALSE}\n\n# using default parameters tweak_spectro()\nwarbleR_options(wav.path = \"./examples\", wl = 220, wn = \"hanning\", ovlp = 90, pal = reverse.topo.colors)\n\nspectrograms(lbh_selec_table, collevels = seq(-100, 0, 5))\n\n```\n\n```{r, eval = FALSE, echo = FALSE}\n\n# using default parameters tweak_spectro()\nwarbleR_options(wav.path = \"~/Dropbox/Workshops/Bioacoustics/Taller Bioacoustics Arequipa 2019/Taller 2/ejemplos\", wl = 220, wn = \"hanning\", ovlp = 90, pal = reverse.topo.colors)\n\nspectrograms(lbh_selec_table, collevels = seq(-100, 0, 5))\n\n```\n\n \n\nThe images it produces are saved in the working directory and look like this:\n\n<img src=\"images/spectrograms2.gif\" alt=\"viewSpec\" width=\"50%\"/>\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Have the label shown on the selection display the data in the 'sel.comment' column of the sample selection box using the `sel.labels` argument\n:::\n\n \n\n### Full spectrograms\n\nWe can create spectrograms for the whole sound files using `full_spectrograms()`. If the `X` argument is not given, the function will create the spectrograms for all the files in the working directory. Otherwise, the function generates spectrograms for sound files in `X` and highlights selections with transparent rectangles similar to those of`spectrograms()`. In this example we download a recording from a striped-throated hermit (*Phaethornis striigularis*) from Xeno-Canto:\n\n```{r, eval = FALSE}\n\n# load package with color palettes\nlibrary(viridis)\n\n# create directory\ndir.create(\"./examples/hermit\")\n\n# download sound file\nphae.stri <- query_xc(qword = \"nr:154074\", download = TRUE, path = \"./examples/hermit\")\n\n# Convert mp3 to wav format\nmp32wav(path = \"./examples/hermit/\", pb = FALSE)\n\n# plot full spec\nfull_spectrograms(sxrow = 1, rows = 10, pal = magma,  wl = 200, flim = c(3, 10),\n          collevels = seq(-140, 0, 5), path = \"./examples/hermit/\")\n\n```\n\n<img src=\"images/fullspec_hermit.gif\" alt=\"hermit\" width=\"80%\"/>\n\n \n\n## Catalogs\n\nCatalogs allow you to inspect selections of many recordings in the same image and group them by categories. This makes it easier to verify the consistency of the categories. Many of the arguments are shared with `tweak_spectro()` (`catalog()` is used internally in `tweak_spectro()`). We can generate a catalog with color tags to identify selections from the same sound file as follows:\n\n```{r, eval = FALSE}\n\n# read bat inquiry data\ninq <- readRDS(file = \"ext_sel_tab_inquiry.RDS\")\n\ncatalog(X = inq[1:100, ], flim = c(10, 50), nrow = 10, ncol = 10, \n        same.time.scale = T, mar = 0.01, gr = FALSE, img.suffix = \"inquiry\",\n        labels = c(\"sound.files\", \"selec\"), legend = 0, rm.axes = TRUE, \n        box = F,  group.tag = \"sound.files\",  tag.pal = list(magma), \n        width = 20, height = 20, pal = viridis, collevels = seq(-100, 0, 5))\n\n```\n\n<img src=\"images/Catalog_p1-inquiry.jpeg\" alt=\"viewSpec\" width=\"100%\"/>\n\n \n\n::: {.alert .alert-info}\n<font size=\"5\">Exercise</font>\n\n \n\n-   Using the 'lbh_selec_table' data, create a catalog with selections color-tagged by song type\n:::\n\n \n\n## Tailoring selections\n\nThe position of the selections in the sound file (i.e. its 'coordinates' of time and frequency) can be modified interactively from R using the `sel_tailor()` function. This function produces a graphic window showing spectrograms and a series of 'buttons' that allow you to modify the view and move forward in the selection table:\n\n```{r, eval=F}\n\ntailor_sels(X = lbh_selec_table[1:4, ], auto.next = TRUE)\n\n```\n\n<img src=\"images/seltailor.autonext.gif\" alt=\"seltailor autonext\" width=\"100%\"/>\n\n \n\nThe function returns the corrected data as a data frame in R and also saves a '.csv' file in the directory where the sound files are located.\n\n`sel_tailor()` can also be used to modify frequency contours such as those produced by the `dfDTW()` or `ffDTW()` function:\n\n```{r, eval=FALSE}\n\ncntours <- freq_ts(X = lbh_selec_table[1:5, ])\n\ntail.cntours <-tailor_sels(X = lbh_selec_table[1:5, ], ts.df = cntours, \n                auto.contour = TRUE)\n```\n\n<img src=\"images/seltailor.contour.gif\" alt=\"seltailor autonext\" width=\"100%\"/>\n\n \n\n------------------------------------------------------------------------\n\n## References\n\n1.  Araya-Salas M, Smith-Vidaurre G (2017) warbleR: An R package to streamline analysis of animal acoustic signals. Methods Ecol Evol 8:184--191.\n\n \n\n------------------------------------------------------------------------\n\n<font size=\"4\">Session information</font>\n\n```{r session info, echo=F}\n\nsessionInfo()\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"number-sections":true,"highlight-style":"pygments","css":["styles.css"],"output-file":"quality_checks.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","toc-location":"left","toc-title":"Contents","code-copy":true,"date":"today","title":"<font size=\"7\"><b>Quality checks for recordings and annotations</b></font>"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}